<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMapConfig      
    PUBLIC "-//ibatis.apache.org//DTD SQL Map Config 2.0//EN"      
    "http://ibatis.apache.org/dtd/sql-map-config-2.dtd">
<sqlMapConfig>
 <!-- <properties url=”file:///c:/config/my.properties” /> 引用：<property name="JDBC.Driver" value="${driver}"/> -->
 <properties resource="org/third/orm/ibatis/account/dao/ibatis/DataBaseConfig.properties" />

    <!-- maxRequests: 同时执行SQL语句的最大线程数。 大于这个值的线程将阻塞直到另一个线程执行完成。不同的DBMS有不同的限制值，但任何数据库都有这些限制。 通常这个值应该至少是maxTransactions（参见以下）的10倍，并且总是大于maxSessions和maxTranactions。减小这个参数值通常能提高性能。 
  缺省值：512 maxSessions: 同一时间内活动的最大session数。 一个session可以是代码请求的显式session，也可以是当线程使用SqlMapClient实例（即执行一条语句）自动获得的session。 它应该总是大于或等于maxTransactions并小于maxRequests。减小这个参数值通常能减少内存使用。 
  缺省值：128 maxTransactions: 同时进入SqlMapClient.startTransaction()的最大线程数。 大于这个值的线程将阻塞直到另一个线程退出。 不同的DBMS有不同的限制值，但任何数据库都有这些限制。这个参数值应该总是小于或等于maxSessions并总是远远小于maxRequests。 
  减小这个参数值通常能提高性能。 缺省值：32 cacheModelsEnabled: 全局性地启用或禁用SqlMapClient的所有缓存model。调试程序时使用。 缺省值：true（启用） lazyLoadingEnabled: 全局性地启用或禁用SqlMapClient的所有延迟加载。调试程序时使用。 
  缺省值：true（启用） enhancementEnabled: 全局性地启用或禁用运行时字节码增强，以优化访问Java Bean属性的性能，同时优化延迟加载的性能。 缺省值：false（禁用） useStatementNamespaces: 
  如果启用本属性，必须使用全限定名来引用mapped statement。 Mapped statement的全限定名由sql-map的名称和mapped-statement的名称合成。 例如：queryForObject(“sqlMapName.statementName”); 
  例如：useStatementNamespaces=“false” 缺省值：false（禁用） -->
 <settings cacheModelsEnabled="true" enhancementEnabled="true" lazyLoadingEnabled="true"
  useStatementNamespaces="false" />

 <!-- Type aliases allow you to use a shorter name for long fully qualified class names. 在SQL Map配置文件预定义了几个别名。它们是： 事务管理器别名 
  Ø JDBC com.ibatis.sqlmap.engine.transaction.jdbc.JdbcTransactionConfig Ø JTA com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig 
  Ø EXTERNAL com.ibatis.sqlmap.engine.transaction.external.ExternalTransactionConfig Data Source Factory别名 Ø SIMPLE com.ibatis.sqlmap.engine.datasource.SimpleDataSourceFactory 
  Ø DBCP com.ibatis.sqlmap.engine.datasource.DbcpDataSourceFactory Ø JNDI com.ibatis.sqlmap.engine.datasource.JndiDataSourceFactory -->
 <typeAlias alias="Class_Account" type="org.ibatis.account.persistence.Account" />


 <!-- 1.0转换注意事项：SQL Map 1.0允许配置多个数据源。这引起了一些不好的实践。 因此，2.0版本只允许一个数据源。要使用多个部署/配置参数，您最好使用多个属性文件，不同的系统使用不同的属性文件 , 或在创建SQL Map时传入不同的属性文件（参见下面的Java 
  API） transactionManager 节点定义了ibatis 的事务管理器，目前提供了以下几 种选择： Ø JDBC: 通过传统JDBC Connection.commit/rollback实现事务支持。 Ø JTA: 使用容器提供的JTA服务实现全局事务管理。本事务管理器使用一个JTA全局事务，使SQL 
  Map的事务包括在更大的事务范围内， ++ 这个更大的事务范围可能包括了其他的数据库和事务资源。这个配置需要一个UserTransaction属性，以便从JNDI获得一个UserTransaction。 Ø EXTERNAL 外部事务管理，如在EJB中使用ibatis，通过EJB的部署配置即可实现自动的事务管理机制。此时ibatis 
  将把所有事务委托给外部容器进行管理。 ++ 这个配置可以让您自己管理事务。您仍然可以配置一个数据源，但事务不再作为框架生命周期的一部分被提交或回退。 ++ 这意味着SQL Map外部应用的一部分必须自己管理事务。这个配置也可以用于没有事务管理的数据库 
  此外，通过Spring 等轻量级容器实现事务的配置化管理也是一个不错的选择。关于结合容器实现事务管理，参见“高级特性”中的描述。 <transactionManager type="JTA"> UserTransaction属性指向UserTransaction实例所在的JNDI位置。JTA事务管理需要它，以使SQL 
  Map能够参与涉及其他数据库和事务资源的范围更大的事务 ++ <property name="UserTransaction" value="java:/ctx/con/UserTransaction"/> ++ <dataSource type="JNDI"> 
  ++ <property name="DataSource" value="java:comp/env/jdbc/myDataSource"/> == </dataSource> </transactionManager> -->
 <transactionManager type="JDBC" commitRequired="false">
  <!-- dataSource从属于transactionManager节点，用于设定ibatis运行期使用的DataSource属性。为SQL Map数据源设置了一系列参数。 目前SQL Map架构只提供三个DataSource Factory，但您也可以添加自己的实现。下面详细地讨论DataSourceFactory的三个实现及其例子 
   type属性： dataSource节点的type属性指定了dataSource的实现类型。 可选项目： Ø SIMPLE： SimpleDataSourceFactory SIMPLE是ibatis内置的dataSource实现，其中实现了一个简单的数据库连接池机制， 
   对应ibatis 实现类为com.ibatis.sqlmap.engine.datasource.SimpleDataSourceFactory。 Ø DBCP: DbcpDataSourceFactory 基于Apache DBCP 连接池组件实现的DataSource 
   封装，当无容器提供DataSource 服务时，建议使用该选项，对应ibatis 实现类为com.ibatis.sqlmap.engine.datasource.DbcpDataSourceFactory。 Ø JNDI： JndiDataSourceFactory 
   使用J2EE 容器提供的DataSource 实现，DataSource 将通过指定的JNDI Name 从容器中获取。对应ibatis 实现类为com.ibatis.sqlmap.engine.datasource.JndiDataSourceFactory。 
   dataSource的子节点说明（SIMPLE&DBCP）： 参数 描述 JDBC.Driver: JDBC 驱动。 例value=org.gjt.mm.mysql.Driver JDBC.ConnectionURL 数据库URL 如：jdbc:mysql://localhost/sample如果用的是SQLServer 
   JDBCDriver，需要在url后追加SelectMethod=Cursor以获得JDBC事务的多Statement支持。 JDBC.Username 数据库用户名 例value=test JDBC.Password 数据库用户密码 例value=test 
   Pool.MaximumActiveConnections: 数据库连接池可维持的最大容量。 例value=10 Pool.MaximumIdleConnections: 数据库连接池中允许的挂起（idle）连接数。 以上子节点适用于SIMPLE 
   和DBCP 模式。 例value=5 对SIMPLE 的私有配置: Pool.MaximumCheckoutTime 数据库联接池中，连接被某个任务所允许占用的最大时间，如果超过这个时间限定，连接将被强制收回。（毫秒） 例如 value=120000 
   Pool.TimeToWait 当线程试图从连接池中获取连接时，连接池中无可用连接可供使用，此时线程将进入等待状态， 直到池中出现空闲连接。 ++ 此参数设定了线程所允许等待的最长时间。（毫秒） 例如 value=10000 Pool.PingQuery 
   数据库连接状态检测语句。 某些数据库在连接在某段时间持续处于空闲状态时会将其断开。而连接池管理器将通过此语句检测池中连接是否可用。 ++ 检测语句应该是一个最简化的无逻辑SQL。 如“select 1 from t_user”，如果执行此语句成功，连接池管理器将认为此连接处于可用状态。 
   Pool.PingEnabled 是否允许检测连接状态。value=false Pool.PingConnectionsOlderThan 对持续连接时间超过设定值（毫秒）的连接进行检测。 value=0 Pool.PingConnectionsNotUsedFor 
   对空闲超过设定值（毫秒）的连接进行检测。 value=0 对 DBCP 的私有配置: Pool.MaximumWait: 当线程试图从连接池中获取连接时，连接池中无可用连接可供使用，此时线程将进入等待状态， 直到池中出现空闲连接。 ++ 此参数设定了线程所允许等待的最长时间。（毫秒） 
   Pool.ValidationQuery 数据库连接状态检测语句。 某些数据库在连接在某段时间持续处于空闲状态时会将其断开。而连接池管理器将通过此 ++ 语句检测池中连接是否可用。 检测语句应该是一个最简化的无逻辑SQL。 如“select 
   1 from t_user”， ++ 如果执行此语句成功，连接池管理器将认为此连接处于可用状态。 Pool.LogAbandoned 当数据库连接被废弃时，是否打印日志。 例如 value=false Pool.RemoveAbandonedTimeout 
   数据库连接被废弃的最大超时时间 例如 value=false Pool.RemoveAbandoned 当连接空闲时间超过RemoveAbandonedTimeout时，是否将其废弃。 例如 value=50000。苏丹 配置JNDI的例子 
   <dataSource type="JNDI"> ++ <property name="DataSource" value="java:comp/env/jdbc/jpetstore"/> </dataSource> -->
  <dataSource type="SIMPLE">
   <property name="JDBC.Driver" value="${db.driver}" />
   <property name="JDBC.ConnectionURL" value="${db.url}" />
   <property name="JDBC.Username" value="${db.username}" />
   <property name="JDBC.Password" value="${db.password}" />
   <property name="Pool.MaximumActiveConnections" value="10" />
   <property name="Pool.MaximumIdleConnections" value="5" />
   <property name="Pool.MaximumCheckoutTime" value="120000" />
   <property name="Pool.TimeToWait" value="500" />
   <property name="Pool.PingQuery" value="select 1 from dual" />
   <property name="Pool.PingEnabled" value="false" />
   <property name="Pool.PingConnectionsOlderThan" value="1" />
   <property name="Pool.PingConnectionsNotUsedFor" value="1" />
  </dataSource>
 </transactionManager>


 <!-- Identify all SQL Map XML files to be loaded by this SQL map. Notice the paths are relative to the classpath. For now, 
  we only have one… CLASSPATH RESOURCES: ++ <sqlMap resource="com/ibatis/examples/sql/Customer.xml" /> ++ <sqlMap resource="com/mydomain/data/Order.xml"/> 
  URL RESOURCES: ++ <sqlMap url="file:///c:/config/Customer.xml " /> -->
 <sqlMap resource="org/third/orm/ibatis/account/dao/ibatis/Account.xml" />
</sqlMapConfig>
