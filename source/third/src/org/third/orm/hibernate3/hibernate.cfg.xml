<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <!-- 
            hibernate.connection.<propertyName>:
            Pass the JDBC property propertyName to DriverManager.getConnection()
            hibernate.jndi.<propertyName>:
            Pass the property propertyName to the JNDI InitialContextFactory.     
            
            HSQL: Database connection settings
            <property name="connection.driver_class">org.hsqldb.jdbcDriver</property>
            <property name="connection.url">jdbc:hsqldb:hsql://localhost</property>
            <property name="connection.username">sa</property>
            <property name="connection.password"></property>            
            
            
            <property name="connection.datasource">datasource JNDI name</property>
            <property name="connection.username">database user (optional)</property>
            <property name="connection.password">database user password (optional)</property>     
            <property name="jndi.url">URL of the JNDI provider (optional)</property>
            <property name="jndi.class">class of the JNDI InitialContextFactory (optional)</property>
            <property name="transaction.factory_class">org.hibernate.transaction.JTATransactionFactory</property>
            <property name="transaction.manager_lookup_class">org.hibernate.transaction.JBossTransactionManagerLookup</property>      
            <property name="jta.UserTransaction">java:comp/UserTransaction</property>
            
        -->

        <property name="connection.driver_class">oracle.jdbc.OracleDriver</property>
        <property name="connection.url">jdbc:oracle:thin:@sunshapp10:1521:EMS7100S</property>
        <property name="connection.username">ygong1</property>
        <property name="connection.password">tellabs</property>
        <!-- Set the JDBC transaction isolation level.
            Check java.sql.Connection for meaningful values but note that most databases do not support all isolation levels. 
            TRANSACTION_NONE : 0
            TRANSACTION_READ_COMMITTED : 1
            TRANSACTION_READ_UNCOMMITTED : 2
            TRANSACTION_REPEATABLE_READ : 4
            TRANSACTION_SERIALIZABLE : 8
        -->
        <property name="connection.isolation">8</property>
        <property name="connection.charset">ISO-8859-1</property>
        <!-- 
            Specify when Hibernate should release JDBC connections. 
            By default, a JDBC connection is held until the session is explicitly closed or disconnected. 
            
            For an application server JTA datasource, you should use after_statement to aggressively release connections 
            after every JDBC call. 
            For a non-JTA connection, it often makes sense to release the connection at the end of each transaction, 
            by using after_transaction. 
            
            "auto" will choose after_statement for the JTA and CMT transaction strategies
            "after_transaction" for the JDBC transaction strategy. 
            
            . auto (default) | on_close | after_transaction | after_statement 
            
            Note:
            this setting only affects Sessions returned from SessionFactory.openSession. 
            For Sessions obtained through SessionFactory.getCurrentSession, the CurrentSessionContext implementation 
            configured for use controls the connection release mode for those Sessions. 
            
        -->
        <property name="connection.release_mode">auto</property>

        <!-- property name="connection.pool_size">1</property-->
        <property name="c3p0.max_size">10</property>
        <property name="c3p0.timeout">1800</property>
        <property name="c3p0.max_statements">20</property>
        <property name="c3p0.min_size">5</property>

        <!-- SQL dialect 
            <property name="dialect">org.hibernate.dialect.HSQLDialect</property>
            <property name="dialect">org.hibernate.dialect.MySQLDialect</property>
        -->
        <property name="dialect">org.hibernate.dialect.Oracle9iDialect</property>


        <!-- Enable Hibernate's automatic session context management 
            jta | thread | managed | custom.Class 
            defines which org.hibernate.context.CurrentSessionContext implementation should be used
        -->
        <property name="current_session_context_class">thread</property>

        <!-- 
            Disable the second-level cache  :org.hibernate.cache.NoCacheProvider
            Cache           Provider_class                              Type                                Cluster_Safe           Query_Cache_Supported 
            Hashtable       org.hibernate.cache.HashtableCacheProvider  memory                                                      yes 
            EHCache         org.hibernate.cache.EhCacheProvider         memory, disk                                                yes 
            OSCache         org.hibernate.cache.OSCacheProvider         memory, disk                                                yes 
            SwarmCache      org.hibernate.cache.SwarmCacheProvider  clustered(ip multicast)                 yes(clustered_invalidation)   
            JBossTreeCache  org.hibernate.cache.TreeCacheProvider   clustered(ip multicast),transactional   yes (replication)       yes (clock sync req.)             
            
            <cache 
            usage="transactional|read-write|nonstrict-read-write|read-only"  (1)
            region="RegionName"                                              (2)
            include="all|non-lazy"                                           (3)
            />
            
            <property name="cache.provider_class">org.hibernate.cache.EhCacheProvider</property>
            
            
            cache settings 
            Usage:  transactional|read-write|nonstrict-read-write|read-only" 
            include="all|non-lazy"      
            
            <class name="eg.Immutable" mutable="false">
            <cache usage="read-only"/>
            ....
            </class>            
        -->
        <property name="cache.use_query_cache">false</property>
        <property name="cache.use_second_level_cache">false</property>


        <!-- Echo all executed SQL to stdout -->
        <property name="show_sql">true</property>
        <property name="use_sql_comments">false</property>
        <property name="use_identifier_rollback">true</property>
        <property name="format_sql">true></property>
        <!-- If max_fetch_depth is set to 0, it will diable the outer-join.
            A setting of 1 or higher enables outer join fetching for one-to-one and many-to-one associations which have been mapped with fetch="join". 
        -->
        <property name="max_fetch_depth">3</property>
        <property name="default_batch_fetch_size">8</property>
        <property name="default_entity_mode">pojo</property><!-- dynamic-map, dom4j,pojo -->
        <property name="order_inserts">true</property>
        <property name="order_updates">true</property>

        <!-- 
            If you enable hibernate.generate_statistics, Hibernate will expose a number of metrics that are useful 
            when tuning a running system via SessionFactory.getStatistics(). 
            Hibernate can even be configured to expose these statistics via JMX. Read the Javadoc of the interfaces 
            in org.hibernate.stats for more information. 
        -->
        <property name="generate_statistics">true</property>

        <!-- Drop and re-create the database schema on startup 
            Automatically validate or export schema DDL to the database when the SessionFactory is created. 
            With create-drop, the database schema will be dropped when the SessionFactory is closed explicitly. 
            validate | update | create | create-drop 
        -->
        <property name="hbm2ddl.auto">validate</property>
        <!-- 
            Oracle limits the size of byte arrays that may be passed to/from its JDBC driver. 
            If you wish to use large instances of binary or serializable type, 
            you should enable hibernate.jdbc.use_streams_for_binary. This is a system-level setting only. 
            
            <property name="jdbc.use_streams_for_binary"></property>
        -->

        <mapping resource="org/hibernate3/core/hello/persistence/hello.hbm.xml" />

        <class-cache class="org.hibernate3.core.hello.persistence.Event" usage="read-write" />

        <!--collection-cache usage="read-only" collection="" /> -->


    </session-factory>

</hibernate-configuration>
