# @(#)file      README
# @(#)author    Sun Microsystems, Inc.
# @(#)version   1.2
# @(#)lastedit  04/04/16
#
# Copyright 2004 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

# ==============================================================================
# 
#  Example of a wrapped legacy Java DMK connector
# 
# ==============================================================================
#
# In order to compile & run the example, make a copy of this
# README file, update the variables to match your local installation,
# and then simply cut & paste all variable definitions & commands 
# as needed into a terminal window.
#
# Note that this README makes the assumption that you are running
# UNIX, you are familiar with the JMX Remote API specification (in
# particular JMXServiceURL), and with Bourne or Korn shell syntax.
#
# All variable assignments and commands below are defined using 
# UNIX Korn shell syntax.
#
# If you're not running UNIX and the Korn shell you are expected
# to be able to adapt these commands to your favorite OS/shell
# environment.
#

# Update the following variables to match your local installation:
#
JDMK_HOME=@INSTALL_HOME_FOR_JDMK@
JDMK_LIB=${JDMK_HOME}/lib

classp=${JDMK_LIB}/jmx.jar:${JDMK_LIB}/jmxremote.jar:
${JDMK_LIB}/jmxremote_optional.jar:${JDMK_LIB}/jdmkrt.jar

# JMX and JMX Remote API (mandatory) are integrated into J2SE 1.5 so
#
# classp=${JDMK_LIB}/jdmkrt.jar:${JDMK_LIB}/jmxremote_optional.jar

# Compile Java classes
#
# * Server.java: shows how to use the JMX Remote factory service to create a 
# Java DMK legacy connector server (HttpConnectorServer, HttpsConnectorServer
# or RmiConnectorServer) and wrap it to a JMXConnectorServer object. This 
# example does not create a HttpsConnectorServer.
#
# * Client.java: shows how to use the JMX Remote factory service to create a 
# Java DMK legacy connector (HttpConnectorClient, HttpsConnectorClient or 
# RmiConnectorClient) and wrap it to a JMXConnector object. This example does 
# not create a HttpsConnectorClient.
#
# * SimpleStandard.java: implements the Simple standard MBean.
#
# * SimpleStandardMBean.java: the management interface exposed by the Simple
#                             standard MBean.
#

javac -classpath $classp *.java

# Start the Server:
#

java -classpath .:$classp Server &

# Start the Client:
#

java -classpath .:$classp Client

# ==============================================================================
