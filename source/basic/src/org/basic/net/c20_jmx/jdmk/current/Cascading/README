# @(#)file      README
# @(#)author    Sun Microsystems, Inc.
# @(#)version   1.16
# @(#)lastedit  04/05/04
#
# Copyright 2004 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


                         Cascading Service Example
                         =========================


-----------------------------------------------------------------------
1. Overview
-----------------------------------------------------------------------

This example shows you how to use the cascading service provided in Java 
DMK to implement a hierarchy of a master agent and a subagent using JSR 160
(JMX Remote API) connectors.

Before running this example, you should get familiar with the cascading
and object naming concepts introduced in the Java DMK 5.1. 
In particular, you should read the com.sun.jdmk.remote.cascading 
package Java documentation - and understand the section discussing
"The File System Analogy".


-----------------------------------------------------------------------
2. File List
-----------------------------------------------------------------------

This example is based on the following source files:

 * MasterAgent.java:

    - Creates a target MBeanServer.
    - Registers an HTML adaptor with port 8084 and registers a 
      CascadingService MBean.
    - Invoke "mount" on the CascadingService MBean using the provided
      JMXServiceURL in order to cascade remote MBeans from the source
      subagents into the target MBeanServer. For each provided 
      JMXServiceURL, uses a target path of the form "subagents/agent#"
      using the arg# of the corresponding JMXServiceURL.
      Uses an ObjectName pattern filter to mount only the source MBeans 
      that are registered under the "ExportDomain" in the source MBeanServer.
    - Adds itself as a listener to a source Timer MBean notifications.
    - Receives the source Timer MBean notifications.
    - Removes the listener from the source Timer MBean.

 * SubAgent.java:

    - Creates an MBean server.
    - Registers an HTML adaptor with port 8082, and a JMX Connector Server
      using the JMXServiceURL provided through the "url" System property
      (-Durl=... on the Java command line). If no url is provided, it creates
      a JMXMP Connector Server listening on the first available port.
    - Displays the server's JMXServiceURL - so that it can be
      copied & pasted when starting the MasterAgent.
    - Registers a SimpleStandard MBean under the default domain.
    - Registers a Timer MBean under the "ExportDomain" domain.

 * SimpleStandard.java:

    - A simple standard MBean.

 * SimpleStandardMBean.java:

    - The management interface of the SimpleStandard MBean.


-----------------------------------------------------------------------
3. Building and Running the Example
-----------------------------------------------------------------------

To build and run this example, make sure that your PATH environment variable
is correctly set to use the Java 2 SDK, Standard Edition 1.4 or later.

On J2SE 1.4, your CLASSPATH must contain the JAR files for the JMX runtime
(jmx.jar), JMX Remote API runtime (jmxremote.jar and jmxremote_optional.jar)
and Java DMK runtime (jdmkrt.jar), as well as the current directory (.).

On J2SE 1.5, your CLASSPATH must contain the JAR files for the optional part of
the JMX Remote API runtime (jmxremote_optional.jar) and the Java DMK runtime
(jdmkrt.jar), as well as the current directory (.).

These instructions assume the classpath is set in an environment variable,
though it can also be given on the command line with the -classpath option.

Copy the example source files to your working directory and type the
following commands:

    cd <WORKING_DIR>

    javac *.java

To run the example using the classes you have just built, type
the following commands in two terminal windows on the same or
on different machines:

    java -Durl=<subagent-input-url> SubAgent

    java MasterAgent <subagent-actual-url>

Where <subagent-input-url> is the input URL that will be passed to the
JMXConnectorServerFactory to create the subagent's JMXConnectorServer,
and <subagent-actual-url> is the actual URL of the subagent's
JMXConnectorServer, once it has been started. The subagent will print
this URL in its terminal window, where it can be copied & pasted to
start the MasterAgent.

Note that you can start many subagents in different terminal window,
and then pass all their URL to the MasterAgent:

    java -Dhtml.port=8082 -Durl=<subagent1-input-url> SubAgent

    java -Dhtml.port=8182 -Durl=<subagent2-input-url> SubAgent

    ....

    java MasterAgent <subagent1-actual-url> <subagent2-actual-url> .... 


Examples of <subagent-input-url> are:

    service:jmx:jmxmp://
    service:jmx:rmi://
    service:jmx:iiop://

Note that you can also use a deterministic URL, namely, a URL that
contains enough information and which doesn't need to be completed
by the JMXConnectorServer once started.

For example, the URL used below can be passed directly to both the
SubAgent and to the MasterAgent, assuming both are run on the same
machine:

    java -Durl="service:jmx:jmxmp://localhost:6543" SubAgent

    java MasterAgent "service:jmx:jmxmp://localhost:6543"

To manage the SubAgent through a Web browser, load the following URL:

    http://<SubAgentHostName>:8082/

You can also access this agent from any remote machine on the same
network by connecting to the JMXServiceURL that was printed out by
the agent.

To manage the MasterAgent through a Web browser, load the following URL:

    http://<MasterAgentHostName>:8084/
