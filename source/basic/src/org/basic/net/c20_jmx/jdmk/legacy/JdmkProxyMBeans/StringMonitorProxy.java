package org.basic.net.c20_jmx.jdmk.legacy.JdmkProxyMBeans;

//
// Generated by proxygen version 5.1 when compiling StringMonitor (Tue Apr 13 19:27:46 MEST 2004).
//

import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanRegistrationException;
import javax.management.ReflectionException;
import javax.management.ObjectName;
import javax.management.Attribute;
import javax.management.ObjectInstance;
import com.sun.jdmk.comm.CommunicationException;
import com.sun.jdmk.comm.RemoteMBeanServer;
import com.sun.jdmk.ProxyHandler;
import javax.management.NotificationListener;
import javax.management.NotificationFilter;
import javax.management.ListenerNotFoundException;


/**
 * The implementation of the StringMonitorProxyMBean Proxy MBean interface.
 *
 * @see com.sun.jdmk.tools.ProxyGen 
 */
public class StringMonitorProxy implements StringMonitorProxyMBean, com.sun.jdmk.Proxy, com.sun.jdmk.NotificationBroadcasterProxy {

  //
  // granularity for allocating new array
  //
  private int _granularity= 10;


  //
  // Variables required by Proxy interface
  //
  protected ObjectInstance objectInstance = null;
  protected ProxyHandler server = null;


  /**
   *  constructor with ObjectInstance parameter
   */
  public StringMonitorProxy(ObjectInstance oi) {    
    objectInstance = oi ;
  }

  /**
   *  constructor with ObjectInstance parameter and ProxyHandler server
   */
  public StringMonitorProxy(ObjectInstance oi, ProxyHandler server) {    
    objectInstance = oi ;
    this.server = server ;
  }

  public java.lang.String getDerivedGauge()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "DerivedGauge"));
    }

  public long getDerivedGaugeTimeStamp()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Long)server.getAttribute(objectInstance.getObjectName(), "DerivedGaugeTimeStamp")).longValue());
    }

  public java.lang.String getStringToCompare()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "StringToCompare"));
    }

  public boolean getNotifyMatch()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "NotifyMatch")).booleanValue());
    }

  public boolean getNotifyDiffer()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "NotifyDiffer")).booleanValue());
    }

  public boolean isActive()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "Active")).booleanValue());
    }

  public long getGranularityPeriod()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Long)server.getAttribute(objectInstance.getObjectName(), "GranularityPeriod")).longValue());
    }

  public java.lang.String getObservedAttribute()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "ObservedAttribute"));
    }

  public javax.management.ObjectName getObservedObject()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((javax.management.ObjectName)server.getAttribute(objectInstance.getObjectName(), "ObservedObject"));
    }

  public ObjectName[] getObservedObjects()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((ObjectName[])server.getAttribute(objectInstance.getObjectName(), "ObservedObjects"));
    }

  public  void setStringToCompare(java.lang.String value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("StringToCompare",value));
  }

  public  void setNotifyMatch(boolean value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("NotifyMatch",new Boolean(value)));
  }

  public  void setNotifyDiffer(boolean value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("NotifyDiffer",new Boolean(value)));
  }

  public  void setGranularityPeriod(long value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("GranularityPeriod",new Long(value)));
  }

  public  void setObservedAttribute(java.lang.String value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("ObservedAttribute",value));
  }

  public  void setObservedObject(javax.management.ObjectName value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("ObservedObject",value));
  }

  public java.lang.String getDerivedGauge(javax.management.ObjectName p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";

    result= server.invoke(objectInstance.getObjectName(), "getDerivedGauge", params, signature);
    return ((java.lang.String) result);
  }

  public long getDerivedGaugeTimeStamp(javax.management.ObjectName p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";

    result= server.invoke(objectInstance.getObjectName(), "getDerivedGaugeTimeStamp", params, signature);
    return ((Long) result).longValue();
  }

  public void start()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "start", null, null);
  }

  public void stop()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "stop", null, null);
  }

  public void addObservedObject(javax.management.ObjectName p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";

    result= server.invoke(objectInstance.getObjectName(), "addObservedObject", params, signature);
  }

  public void removeObservedObject(javax.management.ObjectName p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";

    result= server.invoke(objectInstance.getObjectName(), "removeObservedObject", params, signature);
  }

  public boolean containsObservedObject(javax.management.ObjectName p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";

    result= server.invoke(objectInstance.getObjectName(), "containsObservedObject", params, signature);
    return ((Boolean) result).booleanValue();
  }

  //
  // Implementation of NotificationBroadcasterProxy interface
  //
  public synchronized  void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException {

    server.addNotificationListener(objectInstance.getObjectName(), listener, filter, handback);
  }

  public synchronized  void removeNotificationListener(ObjectName name, NotificationListener listener)
    throws InstanceNotFoundException, ListenerNotFoundException {

    server.removeNotificationListener(objectInstance.getObjectName(), listener);
  }

  //
  // Implementation of the Proxy interface
  //

  /**
   *  Returns the <a href="javax.management.ObjectInstance.html#_top_"> object instance</a> of the object
   */
  public ObjectInstance getMBeanObjectInstance()  {
    return (objectInstance);
  }

  public ProxyHandler getServer() {
    return server;
  }

  public void setServer(ProxyHandler server) {
    this.server = server;
  }


}
