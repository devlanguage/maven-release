# @(#)file      README 
# @(#)author    Sun Microsystems, Inc. 
# @(#)version   1.7 
# @(#)lastedit  04/04/16 
#
# Copyright 2004 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.

# ==============================================================================
# 
# Example of using Jini as a Lookup service - registering and looking up
# an RMI Connector (IIOP/JRMP) and a JMXMP Connector
# 
# ==============================================================================
#
# Requirements: 
#
# Before running this example you will have to:
# ---------------------------------------------
#
# Get and install the Jini lookup technology: 
#
#     http://wwws.sun.com/software/jini/specs/index.html
#     http://wwws.sun.com/software/communitysource/jini/download.html
#
# This example has been implemented using the Jini Technology Starter Kit
# Version 1.2.1_001.
#
# If you wish to use an external directory for the RMI JMX Connectors
# (URLs of the form jmx:service:[rmi|iiop]:/host:port/jndi/jndi-url)
# then:
#
#   o If you wish to use an RMI registry in conjunction with the RMI/JRMP 
#     JMX Connector you will have to start an rmiregistry (see below).
#
#   o If you wish to use CORBA Naming Service in conjunction with the RMI/IIOP 
#     JMX Connector you will have to start an ORB daemon (see below).
#
#   o If you wish to use LDAP in conjunction with the RMI JMX Connectors
#     you will have to install/setup a directory server
#
# In order to compile & run the example, make a copy of this
# README file, update the variables to match your local installation,
# and then simply cut & paste all variable definitions & commands 
# as needed into a terminal window.
#
# Note that this README makes the assumption that you are running
# UNIX, you are familiar with Jini, with the JSR 160 specification
# (in particular JMXServiceURL and Lookup), with LDAP and JNDI,
# and with Bourne or Korn shell syntax.
#
# All variable assignations and commands below are defined using 
# UNIX Korn shell syntax.
#
# If you're not running UNIX and the Korn shell you are expected
# to be able to adapt these commands to your favorite OS/shell
# environment.
#

# Update & define the following variables to match your local installation:
#
JINI_HOME=@INSTALL_HOME_FOR_JINI@
JDMK_HOME=@INSTALL_HOME_FOR_JDMK@

# Define the following variables:
#
JINI_LIB=$JINI_HOME/lib
JDMK_LIB=$JDMK_HOME/lib

classp=$JINI_LIB/jini-core.jar:$JINI_LIB/jini-ext.jar:$JDMK_LIB/jmxremote.jar:
$JDMK_LIB/jmxremote_optional.jar:$JDMK_LIB/jmx.jar

# JMX and JMX Remote API (mandatory) are integrated into J2SE 1.5 so
#
# classp=$JINI_LIB/jini-core.jar:$JINI_LIB/jini-ext.jar:
$JDMK_LIB/jmxremote_optional.jar

# Create a java.policy file from the java.policy.template file 
# provided in this example.

# Replace the paths in the java.policy file. On J2SE 1.5 the grant clauses for
# jmx.jar and jmxremote.jar are not necessary as those files are part of the
# platform and therefore have all permissions granted implicitly.

# Create a jini.properties file, either from
# $JINI_HOME/example/launcher/jini12_<platform>.properties
# or from the jini.properties.template file 
# provided in this example for the UNIX platform.

# Replace the paths and hostnames (default is localhost) where needed in the
# jini.properties file.

# Launch Jini StartService example:
#
java -classpath $JINI_LIB/jini-examples.jar \
     com.sun.jini.example.launcher.StartService &

# Load the edited jini.properties file in the launcher tool.

# Use Jini StartService example to start:
#    * RMID, 
#    * WebServer, 
#    * Reggie, 
#    * and LookupBrowser

#-------------------------------------------------------------------------------
# Start an rmiregistry (don't forget to put the JMX & JMX Remote API jars in its
# classpath)
#
export CLASSPATH=$JDMK_LIB/jmx.jar:$JDMK_LIB/jmxremote.jar ; rmiregistry 9999 &

# JMX and JMX Remote API (mandatory) are integrated into J2SE 1.5 so
#
# rmiregistry 9999 &

#-------------------------------------------------------------------------------
# Start an ORB daemon:
#
rm -rf ./orb.db
orbd -ORBInitialPort 7777 &

#-------------------------------------------------------------------------------
# Start an LDAP Server, and create a new dc=Test suffix.
#
# (This is only needed if you wish to register the RMI or IIOP
#  stubs in LDAP, instead of using CORBA Naming Service or RMI registry)
#
# On Solaris 9 you should first login as root and execute
# the following commands:

# Setup an LDAP server (you don't need to do this if the
# server has already been configured).
#
/usr/sbin/directoryserver setup

# Start the console, and if needed create a new suffix, a database,
# and a root node (e.g. dc=Test)
#
/usr/sbin/directoryserver startconsole

# NOTE: if you are not using Solaris 9 Directory Server you will have
#       to make sure the Java Schema (RFC 2713: 
#       http://www.ietf.org/rfc/rfc2713.txt) is known by that server

#-------------------------------------------------------------------------------
# Compile Server.java and Client.java
#
# * Server.java: creates an MBeanServer, creates and starts an
#                RMI connector (JRMP/IIOP) or a JMXMP connector
# * Client.java: lookup a connector in Jini
#                list all MBeans.

javac -d . -classpath $classp Server.java Client.java

#-------------------------------------------------------------------------------
# LDAP parameters:

# Supply the appropriate hostname below, and define this variable:
#
ldaphost=<host_name>

# Supply the appropriate port number below, and define this variable:
#
ldapport=6666

# Supply the appropriate principal below, and define this variable:
#
principal="cn=Directory Manager"

# Supply the appropriate credentials below, and define this variable:
#
credentials=

#-------------------------------------------------------------------------------
# JNDI URLs
#
jndirmi="rmi://localhost:9999"
jndiiiop="iiop://localhost:7777"
jndildap="ldap://$ldaphost:$ldapport"

#-------------------------------------------------------------------------------
# Below we illustrate the different JMX Connector Servers
# which you can choose to start. 
# There are seven cases labelled (a) to (g):
#
#   * RMI Connectors
#       + over JRMP
#           - without any external directory (a)
#           - using rmiregistry as external directory (b)
#           - using LDAP as external directory (c)
#       + over IIOP
#           - without any external directory (d)
#           - using CORBA Naming Service as external directory (e)
#           - using LDAP as external directory (f)
#   * JMXMP Connector (g)

# NOTE-1: As defined in section 6.1 "Terminology" of the "JMX Remote API 1.0 
# Specification" document, an agent is composed of one MBean Server and of 
# one or more Connector Servers. There can be several agents running in one JVM.
# For flexibility of this example, the jini.Server class creates an agent which
# is composed of one MBean Server and of only one Connector Server. The class
# jini.Server decides which type of Connector Server to create depending on the
# value given to the "url" system property when you start the example.

# NOTE-2: The value of the "agent.name" system property is the value that the 
# jini.Server class will give to the "AgentName" lookup attribute when it 
# registers the connector's URL in the lookup service. As defined in Table 6.1
# "Lookup attributes for connectors" of the "JMX Remote API 1.0 Specification" 
# document: the "AgentName" lookup attribute is a simple name used to identify 
# the *AGENT* to which the connector is attached. It makes it possible to 
# search, with a query to the lookup service, for all the connectors registered
# by a given agent.

# (a) You can start an agent with an RMI Connector Server over JRMP
#     without using any external directory
#
java -classpath .:$classp -Ddebug=true \
     -Dagent.name=test-server-a \
     -Durl="service:jmx:rmi://" \
     -Djava.security.policy=java.policy \
     jini.Server &

# (b) Or you can start an agent with an RMI Connector Server over JRMP
#     using rmiregistry as an external directory
#     (Start rmiregistry first, if not yet started)
#
java -classpath .:$classp -Ddebug=true \
     -Dagent.name=test-server-b \
     -Durl="service:jmx:rmi:///jndi/${jndirmi}/server" \
     -Djava.security.policy=java.policy \
     jini.Server &

# (c) Or you can start an agent with an RMI Connector Server over JRMP
#     using LDAP as an external directory
#     (First start an LDAP server and create the dc=Test suffix)
#
java -classpath .:$classp -Ddebug=true \
     -Dagent.name=test-server-c \
     -Durl="service:jmx:rmi:///jndi/${jndildap}/cn=x,dc=Test" \
     -Djava.security.policy=java.policy \
     -Djava.naming.security.principal="$principal" \
     -Djava.naming.security.credentials="$credentials" \
     jini.Server &

# (d) Or you can start an agent with an RMI Connector Server over IIOP
#     without using any external directory
#
java -classpath .:$classp -Ddebug=true \
     -Dagent.name=test-server-d \
     -Durl="service:jmx:iiop://" \
     -Djava.security.policy=java.policy \
     jini.Server &

# (e) Or you can start an agent with an RMI Connector Server over IIOP
#     using CORBA Naming Service as an external directory
#     (Start ORBD first if not yet started).
#
java -classpath .:$classp -Ddebug=true \
     -Dagent.name=test-server-e \
     -Durl="service:jmx:iiop:///jndi/${jndiiiop}/server" \
     -Djava.security.policy=java.policy \
     jini.Server &

# (f) Or you can start an agent with an RMI Connector Server over IIOP
#     using LDAP as an external directory
#     (First start an LDAP server and create the dc=Test suffix) 
#
java -classpath .:$classp -Ddebug=true \
     -Dagent.name=test-server-f \
     -Durl="service:jmx:iiop:///jndi/${jndildap}/cn=x,dc=Test" \
     -Djava.security.policy=java.policy \
     -Djava.naming.security.principal="$principal" \
     -Djava.naming.security.credentials="$credentials" \
     jini.Server &

# (g) Or you can start an agent with a JMXMP Connector Server 
#
java -classpath .:$classp -Ddebug=true \
     -Dagent.name=test-server-g \
     -Durl="service:jmx:jmxmp://" \
     -Djava.security.policy=java.policy \
     jini.Server &

# Once you have started one or more agents, you can start the Client.
#
java -classpath .:$classp -Ddebug=true \
     -Djava.security.policy=java.policy \
     jini.Client

#-------------------------------------------------------------------------------
