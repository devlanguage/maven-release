
//
// Generated by proxygen version 5.1 when compiling com.sun.jdmk.comm.HttpConnectorServer (Tue Apr 13 19:29:12 MEST 2004).
//

package org.basic.net.c20_jmx.jdmk.legacy.JdmkProxyMBeans;


import javax.management.Attribute;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanException;
import javax.management.NotificationFilter;
import javax.management.NotificationListener;
import javax.management.ObjectInstance;
import javax.management.ObjectName;
import javax.management.ReflectionException;

import com.sun.jdmk.ProxyHandler;


/**
 * The implementation of the HttpConnectorServerProxyMBean Proxy MBean interface.
 *
 * @see com.sun.jdmk.tools.ProxyGen 
 */
public class HttpConnectorServerProxy implements HttpConnectorServerProxyMBean, com.sun.jdmk.Proxy, com.sun.jdmk.NotificationBroadcasterProxy {


  //
  // Variables required by Proxy interface
  //
  protected ObjectInstance objectInstance = null;
  protected ProxyHandler server = null;


  /**
   *  constructor with ObjectInstance parameter
   */
  public HttpConnectorServerProxy(ObjectInstance oi) {    
    objectInstance = oi ;
  }

  /**
   *  constructor with ObjectInstance parameter and ProxyHandler server
   */
  public HttpConnectorServerProxy(ObjectInstance oi, ProxyHandler server) {    
    objectInstance = oi ;
    this.server = server ;
  }

  public int getTimeout()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "Timeout")).intValue());
    }

  public int getServedClientCount()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "ServedClientCount")).intValue());
    }

  public int getActiveClientCount()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "ActiveClientCount")).intValue());
    }

  public int getMaxActiveClientCount()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "MaxActiveClientCount")).intValue());
    }

  public java.lang.String getLastConnectedClient()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "LastConnectedClient"));
    }

  public boolean isAuthenticationOn()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "AuthenticationOn")).booleanValue());
    }

  public int getState()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "State")).intValue());
    }

  public java.lang.String getHost()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "Host"));
    }

  public java.lang.String getProtocol()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "Protocol"));
    }

  public boolean isActive()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "Active")).booleanValue());
    }

  public java.lang.String getStateString()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "StateString"));
    }

  public int getPort()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "Port")).intValue());
    }

  public  void setTimeout(int value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("Timeout",new Integer(value)));
  }

  public  void setMaxActiveClientCount(int value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("MaxActiveClientCount",new Integer(value)));
  }

  public  void setPort(int value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("Port",new Integer(value)));
  }

  public void start()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "start", null, null);
  }

  public void stop()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "stop", null, null);
  }

  public boolean waitState(int p0, long p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= new Integer(p0);
    signature[0]= "int";
    params[1]= new Long(p1);
    signature[1]= "long";

    result= server.invoke(objectInstance.getObjectName(), "waitState", params, signature);
    return ((Boolean) result).booleanValue();
  }

  //
  // Implementation of NotificationBroadcasterProxy interface
  //
  public synchronized  void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException {

    server.addNotificationListener(objectInstance.getObjectName(), listener, filter, handback);
  }

  public synchronized  void removeNotificationListener(ObjectName name, NotificationListener listener)
    throws InstanceNotFoundException, ListenerNotFoundException {

    server.removeNotificationListener(objectInstance.getObjectName(), listener);
  }

  //
  // Implementation of the Proxy interface
  //

  /**
   *  Returns the <a href="javax.management.ObjectInstance.html#_top_"> object instance</a> of the object
   */
  public ObjectInstance getMBeanObjectInstance()  {
    return (objectInstance);
  }

  public ProxyHandler getServer() {
    return server;
  }

  public void setServer(ProxyHandler server) {
    this.server = server;
  }


}
