
//
// Generated by proxygen version 5.1 when compiling com.sun.jdmk.discovery.DiscoveryClient (Tue Apr 13 19:28:05 MEST 2004).
//

package org.basic.net.c20_jmx.jdmk.legacy.JdmkProxyMBeans;


import javax.management.Attribute;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.ObjectInstance;
import javax.management.ReflectionException;

import com.sun.jdmk.ProxyHandler;


/**
 * The implementation of the DiscoveryClientProxyMBean Proxy MBean interface.
 *
 * @see com.sun.jdmk.tools.ProxyGen 
 */
public class DiscoveryClientProxy implements  com.sun.jdmk.Proxy {


  //
  // Variables required by Proxy interface
  //
  protected ObjectInstance objectInstance = null;
  protected ProxyHandler server = null;

  /**
   *  constructor with ObjectInstance parameter
   */
  public DiscoveryClientProxy(ObjectInstance oi) {    
    objectInstance = oi ;
  }

  /**
   *  constructor with ObjectInstance parameter and ProxyHandler server
   */
  public DiscoveryClientProxy(ObjectInstance oi, ProxyHandler server) {    
    objectInstance = oi ;
    this.server = server ;
  }

  public java.lang.Integer getState()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.Integer)server.getAttribute(objectInstance.getObjectName(), "State"));
    }

  public boolean isActive()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "Active")).booleanValue());
    }

  public java.lang.String getMulticastGroup()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "MulticastGroup"));
    }

  public int getMulticastPort()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "MulticastPort")).intValue());
    }

  public int getTimeOut()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "TimeOut")).intValue());
    }

  public int getTimeToLive()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "TimeToLive")).intValue());
    }

  public boolean getPointToPointResponse()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "PointToPointResponse")).booleanValue());
    }

  public java.lang.String getStateString()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "StateString"));
    }

  public  void setMulticastGroup(java.lang.String value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("MulticastGroup",value));
  }

  public  void setMulticastPort(int value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("MulticastPort",new Integer(value)));
  }

  public  void setTimeOut(int value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("TimeOut",new Integer(value)));
  }

  public  void setTimeToLive(int value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("TimeToLive",new Integer(value)));
  }

  public  void setPointToPointResponse(boolean value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("PointToPointResponse",new Boolean(value)));
  }

  public void start()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "start", null, null);
  }

  public void stop()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "stop", null, null);
  }

  public java.util.Vector findMBeanServers(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "findMBeanServers", params, signature);
    return ((java.util.Vector) result);
  }

  public java.util.Vector findMBeanServers()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "findMBeanServers", null, null);
    return ((java.util.Vector) result);
  }

  public java.util.Vector findCommunicators(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "findCommunicators", params, signature);
    return ((java.util.Vector) result);
  }

  public java.util.Vector findCommunicators()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "findCommunicators", null, null);
    return ((java.util.Vector) result);
  }

  //
  // Implementation of the Proxy interface
  //

  /**
   *  Returns the <a href="javax.management.ObjectInstance.html#_top_"> object instance</a> of the object
   */
  public ObjectInstance getMBeanObjectInstance()  {
    return (objectInstance);
  }

  public ProxyHandler getServer() {
    return server;
  }

  public void setServer(ProxyHandler server) {
    this.server = server;
  }


}
