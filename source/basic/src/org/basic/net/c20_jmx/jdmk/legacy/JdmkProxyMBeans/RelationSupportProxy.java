package org.basic.net.c20_jmx.jdmk.legacy.JdmkProxyMBeans;

//
// Generated by proxygen version 5.1 when compiling RelationSupport (Tue Apr 13 19:32:23 MEST 2004).
//

import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanRegistrationException;
import javax.management.ReflectionException;
import javax.management.relation.RoleResult;
import javax.management.relation.Role;
import java.util.Map;
import javax.management.ObjectName;
import javax.management.Attribute;
import javax.management.ObjectInstance;
import com.sun.jdmk.comm.CommunicationException;
import com.sun.jdmk.comm.RemoteMBeanServer;
import com.sun.jdmk.ProxyHandler;
import java.util.List;
import javax.management.relation.RoleList;


/**
 * The implementation of the RelationSupportProxyMBean Proxy MBean interface.
 *
 * @see com.sun.jdmk.tools.ProxyGen 
 */
public class RelationSupportProxy implements RelationSupportProxyMBean, com.sun.jdmk.Proxy {


  //
  // Variables required by Proxy interface
  //
  protected ObjectInstance objectInstance = null;
  protected ProxyHandler server = null;

  /**
   *  constructor with ObjectInstance parameter
   */
  public RelationSupportProxy(ObjectInstance oi) {    
    objectInstance = oi ;
  }

  /**
   *  constructor with ObjectInstance parameter and ProxyHandler server
   */
  public RelationSupportProxy(ObjectInstance oi, ProxyHandler server) {    
    objectInstance = oi ;
    this.server = server ;
  }

  public java.lang.Boolean isInRelationService()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.Boolean)server.getAttribute(objectInstance.getObjectName(), "InRelationService"));
    }

  public javax.management.relation.RoleResult getAllRoles()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((javax.management.relation.RoleResult)server.getAttribute(objectInstance.getObjectName(), "AllRoles"));
    }

  public java.util.Map getReferencedMBeans()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.util.Map)server.getAttribute(objectInstance.getObjectName(), "ReferencedMBeans"));
    }

  public java.lang.String getRelationTypeName()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "RelationTypeName"));
    }

  public javax.management.ObjectName getRelationServiceName()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((javax.management.ObjectName)server.getAttribute(objectInstance.getObjectName(), "RelationServiceName"));
    }

  public java.lang.String getRelationId()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.lang.String)server.getAttribute(objectInstance.getObjectName(), "RelationId"));
    }

  public  void setRelationServiceManagementFlag(java.lang.Boolean value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("RelationServiceManagementFlag",value));
  }

  public  void setRole(javax.management.relation.Role value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("Role",value));
  }

  public java.util.List getRole(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getRole", params, signature);
    return ((java.util.List) result);
  }

  public javax.management.relation.RoleResult getRoles(String[] p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "[Ljava.lang.String;";

    result= server.invoke(objectInstance.getObjectName(), "getRoles", params, signature);
    return ((javax.management.relation.RoleResult) result);
  }

  public javax.management.relation.RoleList retrieveAllRoles()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "retrieveAllRoles", null, null);
    return ((javax.management.relation.RoleList) result);
  }

  public java.lang.Integer getRoleCardinality(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getRoleCardinality", params, signature);
    return ((java.lang.Integer) result);
  }

  public javax.management.relation.RoleResult setRoles(javax.management.relation.RoleList p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.relation.RoleList";

    result= server.invoke(objectInstance.getObjectName(), "setRoles", params, signature);
    return ((javax.management.relation.RoleResult) result);
  }

  public void handleMBeanUnregistration(javax.management.ObjectName p0, java.lang.String p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";
    params[1]= p1;
    signature[1]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "handleMBeanUnregistration", params, signature);
  }

  //
  // Implementation of the Proxy interface
  //

  /**
   *  Returns the <a href="javax.management.ObjectInstance.html#_top_"> object instance</a> of the object
   */
  public ObjectInstance getMBeanObjectInstance()  {
    return (objectInstance);
  }

  public ProxyHandler getServer() {
    return server;
  }

  public void setServer(ProxyHandler server) {
    this.server = server;
  }


}
