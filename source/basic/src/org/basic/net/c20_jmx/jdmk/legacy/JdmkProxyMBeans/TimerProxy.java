package org.basic.net.c20_jmx.jdmk.legacy.JdmkProxyMBeans;

//
// Generated by proxygen version 5.1 when compiling Timer (Tue Apr 13 19:30:59 MEST 2004).
//

import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanRegistrationException;
import javax.management.ReflectionException;
import java.util.Vector;
import javax.management.Attribute;
import javax.management.ObjectInstance;
import com.sun.jdmk.comm.CommunicationException;
import com.sun.jdmk.comm.RemoteMBeanServer;
import com.sun.jdmk.ProxyHandler;
import javax.management.ObjectName;
import javax.management.NotificationListener;
import javax.management.NotificationFilter;
import javax.management.ListenerNotFoundException;
import java.util.Date;


/**
 * The implementation of the TimerProxyMBean Proxy MBean interface.
 *
 * @see com.sun.jdmk.tools.ProxyGen 
 */
public class TimerProxy implements TimerProxyMBean, com.sun.jdmk.Proxy, com.sun.jdmk.NotificationBroadcasterProxy {


  //
  // Variables required by Proxy interface
  //
  protected ObjectInstance objectInstance = null;
  protected ProxyHandler server = null;


  /**
   *  constructor with ObjectInstance parameter
   */
  public TimerProxy(ObjectInstance oi) {    
    objectInstance = oi ;
  }

  /**
   *  constructor with ObjectInstance parameter and ProxyHandler server
   */
  public TimerProxy(ObjectInstance oi, ProxyHandler server) {    
    objectInstance = oi ;
    this.server = server ;
  }

  public boolean isEmpty()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "Empty")).booleanValue());
    }

  public boolean isActive()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "Active")).booleanValue());
    }

  public int getNbNotifications()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Integer)server.getAttribute(objectInstance.getObjectName(), "NbNotifications")).intValue());
    }

  public java.util.Vector getAllNotificationIDs()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.util.Vector)server.getAttribute(objectInstance.getObjectName(), "AllNotificationIDs"));
    }

  public boolean getSendPastNotifications()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "SendPastNotifications")).booleanValue());
    }

  public  void setSendPastNotifications(boolean value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("SendPastNotifications",new Boolean(value)));
  }

  public void start()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "start", null, null);
  }

  public void stop()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "stop", null, null);
  }

  public java.util.Date getDate(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "getDate", params, signature);
    return ((java.util.Date) result);
  }

  public java.lang.Integer addNotification(java.lang.String p0, java.lang.String p1, java.lang.Object p2, java.util.Date p3, long p4, long p5)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[6];
    String[] signature= new String[6];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "java.lang.Object";
    params[3]= p3;
    signature[3]= "java.util.Date";
    params[4]= new Long(p4);
    signature[4]= "long";
    params[5]= new Long(p5);
    signature[5]= "long";

    result= server.invoke(objectInstance.getObjectName(), "addNotification", params, signature);
    return ((java.lang.Integer) result);
  }

  public java.lang.Integer addNotification(java.lang.String p0, java.lang.String p1, java.lang.Object p2, java.util.Date p3, long p4)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[5];
    String[] signature= new String[5];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "java.lang.Object";
    params[3]= p3;
    signature[3]= "java.util.Date";
    params[4]= new Long(p4);
    signature[4]= "long";

    result= server.invoke(objectInstance.getObjectName(), "addNotification", params, signature);
    return ((java.lang.Integer) result);
  }

  public java.lang.Integer addNotification(java.lang.String p0, java.lang.String p1, java.lang.Object p2, java.util.Date p3)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[4];
    String[] signature= new String[4];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "java.lang.Object";
    params[3]= p3;
    signature[3]= "java.util.Date";

    result= server.invoke(objectInstance.getObjectName(), "addNotification", params, signature);
    return ((java.lang.Integer) result);
  }

  public java.lang.Integer addNotification(java.lang.String p0, java.lang.String p1, java.lang.Object p2, java.util.Date p3, long p4, long p5, boolean p6)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[7];
    String[] signature= new String[7];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "java.lang.Object";
    params[3]= p3;
    signature[3]= "java.util.Date";
    params[4]= new Long(p4);
    signature[4]= "long";
    params[5]= new Long(p5);
    signature[5]= "long";
    params[6]= new Boolean(p6);
    signature[6]= "boolean";

    result= server.invoke(objectInstance.getObjectName(), "addNotification", params, signature);
    return ((java.lang.Integer) result);
  }

  public void removeNotification(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "removeNotification", params, signature);
  }

  public void removeNotifications(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "removeNotifications", params, signature);
  }

  public void removeAllNotifications()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "removeAllNotifications", null, null);
  }

  public java.util.Vector getNotificationIDs(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getNotificationIDs", params, signature);
    return ((java.util.Vector) result);
  }

  public java.lang.String getNotificationType(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "getNotificationType", params, signature);
    return ((java.lang.String) result);
  }

  public java.lang.String getNotificationMessage(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "getNotificationMessage", params, signature);
    return ((java.lang.String) result);
  }

  public java.lang.Object getNotificationUserData(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "getNotificationUserData", params, signature);
    return ((java.lang.Object) result);
  }

  public java.lang.Long getPeriod(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "getPeriod", params, signature);
    return ((java.lang.Long) result);
  }

  public java.lang.Long getNbOccurences(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "getNbOccurences", params, signature);
    return ((java.lang.Long) result);
  }

  public java.lang.Boolean getFixedRate(java.lang.Integer p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.Integer";

    result= server.invoke(objectInstance.getObjectName(), "getFixedRate", params, signature);
    return ((java.lang.Boolean) result);
  }

  //
  // Implementation of NotificationBroadcasterProxy interface
  //
  public synchronized  void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException {

    server.addNotificationListener(objectInstance.getObjectName(), listener, filter, handback);
  }

  public synchronized  void removeNotificationListener(ObjectName name, NotificationListener listener)
    throws InstanceNotFoundException, ListenerNotFoundException {

    server.removeNotificationListener(objectInstance.getObjectName(), listener);
  }

  //
  // Implementation of the Proxy interface
  //

  /**
   *  Returns the <a href="javax.management.ObjectInstance.html#_top_"> object instance</a> of the object
   */
  public ObjectInstance getMBeanObjectInstance()  {
    return (objectInstance);
  }

  public ProxyHandler getServer() {
    return server;
  }

  public void setServer(ProxyHandler server) {
    this.server = server;
  }


}
