package org.basic.net.c20_jmx.jdmk.legacy.JdmkProxyMBeans;

//
// Generated by proxygen version 5.1 when compiling RelationService (Tue Apr 13 19:31:31 MEST 2004).
//

import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.MBeanException;
import javax.management.MBeanRegistrationException;
import javax.management.ReflectionException;
import java.util.List;
import javax.management.Attribute;
import javax.management.ObjectInstance;
import com.sun.jdmk.comm.CommunicationException;
import com.sun.jdmk.comm.RemoteMBeanServer;
import com.sun.jdmk.ProxyHandler;
import javax.management.ObjectName;
import javax.management.NotificationListener;
import javax.management.NotificationFilter;
import javax.management.ListenerNotFoundException;
import javax.management.relation.RoleInfo;
import javax.management.relation.RelationType;
import javax.management.relation.RoleList;
import javax.management.relation.Role;
import java.util.Map;
import javax.management.relation.RoleResult;


/**
 * The implementation of the RelationServiceProxyMBean Proxy MBean interface.
 *
 * @see com.sun.jdmk.tools.ProxyGen 
 */
public class RelationServiceProxy implements RelationServiceProxyMBean, com.sun.jdmk.Proxy, com.sun.jdmk.NotificationBroadcasterProxy {


  //
  // Variables required by Proxy interface
  //
  protected ObjectInstance objectInstance = null;
  protected ProxyHandler server = null;


  /**
   *  constructor with ObjectInstance parameter
   */
  public RelationServiceProxy(ObjectInstance oi) {    
    objectInstance = oi ;
  }

  /**
   *  constructor with ObjectInstance parameter and ProxyHandler server
   */
  public RelationServiceProxy(ObjectInstance oi, ProxyHandler server) {    
    objectInstance = oi ;
    this.server = server ;
  }

  public boolean getPurgeFlag()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return (((Boolean)server.getAttribute(objectInstance.getObjectName(), "PurgeFlag")).booleanValue());
    }

  public java.util.List getAllRelationTypeNames()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.util.List)server.getAttribute(objectInstance.getObjectName(), "AllRelationTypeNames"));
    }

  public java.util.List getAllRelationIds()
    throws InstanceNotFoundException, AttributeNotFoundException,
    ReflectionException, MBeanException {

      return ((java.util.List)server.getAttribute(objectInstance.getObjectName(), "AllRelationIds"));
    }

  public  void setPurgeFlag(boolean value)
    throws InstanceNotFoundException, ReflectionException,
    AttributeNotFoundException,InvalidAttributeValueException,
    MBeanException {

      server.setAttribute(objectInstance.getObjectName(), new Attribute("PurgeFlag",new Boolean(value)));
  }

  public void createRelationType(java.lang.String p0, RoleInfo[] p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "[Ljavax.management.relation.RoleInfo;";

    result= server.invoke(objectInstance.getObjectName(), "createRelationType", params, signature);
  }

  public void addRelationType(javax.management.relation.RelationType p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.relation.RelationType";

    result= server.invoke(objectInstance.getObjectName(), "addRelationType", params, signature);
  }

  public java.util.List getRoleInfos(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getRoleInfos", params, signature);
    return ((java.util.List) result);
  }

  public javax.management.relation.RoleInfo getRoleInfo(java.lang.String p0, java.lang.String p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getRoleInfo", params, signature);
    return ((javax.management.relation.RoleInfo) result);
  }

  public void removeRelationType(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "removeRelationType", params, signature);
  }

  public void createRelation(java.lang.String p0, java.lang.String p1, javax.management.relation.RoleList p2)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[3];
    String[] signature= new String[3];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "javax.management.relation.RoleList";

    result= server.invoke(objectInstance.getObjectName(), "createRelation", params, signature);
  }

  public void addRelation(javax.management.ObjectName p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";

    result= server.invoke(objectInstance.getObjectName(), "addRelation", params, signature);
  }

  public javax.management.ObjectName isRelationMBean(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "isRelationMBean", params, signature);
    return ((javax.management.ObjectName) result);
  }

  public java.lang.String isRelation(javax.management.ObjectName p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";

    result= server.invoke(objectInstance.getObjectName(), "isRelation", params, signature);
    return ((java.lang.String) result);
  }

  public java.lang.Boolean hasRelation(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "hasRelation", params, signature);
    return ((java.lang.Boolean) result);
  }

  public java.lang.Integer checkRoleReading(java.lang.String p0, java.lang.String p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "checkRoleReading", params, signature);
    return ((java.lang.Integer) result);
  }

  public java.lang.Integer checkRoleWriting(javax.management.relation.Role p0, java.lang.String p1, java.lang.Boolean p2)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[3];
    String[] signature= new String[3];

    params[0]= p0;
    signature[0]= "javax.management.relation.Role";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "java.lang.Boolean";

    result= server.invoke(objectInstance.getObjectName(), "checkRoleWriting", params, signature);
    return ((java.lang.Integer) result);
  }

  public void sendRelationCreationNotification(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "sendRelationCreationNotification", params, signature);
  }

  public void sendRoleUpdateNotification(java.lang.String p0, javax.management.relation.Role p1, java.util.List p2)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[3];
    String[] signature= new String[3];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "javax.management.relation.Role";
    params[2]= p2;
    signature[2]= "java.util.List";

    result= server.invoke(objectInstance.getObjectName(), "sendRoleUpdateNotification", params, signature);
  }

  public void sendRelationRemovalNotification(java.lang.String p0, java.util.List p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.util.List";

    result= server.invoke(objectInstance.getObjectName(), "sendRelationRemovalNotification", params, signature);
  }

  public void updateRoleMap(java.lang.String p0, javax.management.relation.Role p1, java.util.List p2)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[3];
    String[] signature= new String[3];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "javax.management.relation.Role";
    params[2]= p2;
    signature[2]= "java.util.List";

    result= server.invoke(objectInstance.getObjectName(), "updateRoleMap", params, signature);
  }

  public void removeRelation(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "removeRelation", params, signature);
  }

  public void purgeRelations()
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    result= server.invoke(objectInstance.getObjectName(), "purgeRelations", null, null);
  }

  public java.util.Map findReferencingRelations(javax.management.ObjectName p0, java.lang.String p1, java.lang.String p2)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[3];
    String[] signature= new String[3];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "findReferencingRelations", params, signature);
    return ((java.util.Map) result);
  }

  public java.util.Map findAssociatedMBeans(javax.management.ObjectName p0, java.lang.String p1, java.lang.String p2)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[3];
    String[] signature= new String[3];

    params[0]= p0;
    signature[0]= "javax.management.ObjectName";
    params[1]= p1;
    signature[1]= "java.lang.String";
    params[2]= p2;
    signature[2]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "findAssociatedMBeans", params, signature);
    return ((java.util.Map) result);
  }

  public java.util.List findRelationsOfType(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "findRelationsOfType", params, signature);
    return ((java.util.List) result);
  }

  public java.util.List getRole(java.lang.String p0, java.lang.String p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getRole", params, signature);
    return ((java.util.List) result);
  }

  public javax.management.relation.RoleResult getRoles(java.lang.String p0, String[] p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "[Ljava.lang.String;";

    result= server.invoke(objectInstance.getObjectName(), "getRoles", params, signature);
    return ((javax.management.relation.RoleResult) result);
  }

  public javax.management.relation.RoleResult getAllRoles(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getAllRoles", params, signature);
    return ((javax.management.relation.RoleResult) result);
  }

  public java.lang.Integer getRoleCardinality(java.lang.String p0, java.lang.String p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getRoleCardinality", params, signature);
    return ((java.lang.Integer) result);
  }

  public void setRole(java.lang.String p0, javax.management.relation.Role p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "javax.management.relation.Role";

    result= server.invoke(objectInstance.getObjectName(), "setRole", params, signature);
  }

  public javax.management.relation.RoleResult setRoles(java.lang.String p0, javax.management.relation.RoleList p1)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[2];
    String[] signature= new String[2];

    params[0]= p0;
    signature[0]= "java.lang.String";
    params[1]= p1;
    signature[1]= "javax.management.relation.RoleList";

    result= server.invoke(objectInstance.getObjectName(), "setRoles", params, signature);
    return ((javax.management.relation.RoleResult) result);
  }

  public java.util.Map getReferencedMBeans(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getReferencedMBeans", params, signature);
    return ((java.util.Map) result);
  }

  public java.lang.String getRelationTypeName(java.lang.String p0)
    throws InstanceNotFoundException, ReflectionException,
    MBeanException {

    Object result;
    Object[] params= new Object[1];
    String[] signature= new String[1];

    params[0]= p0;
    signature[0]= "java.lang.String";

    result= server.invoke(objectInstance.getObjectName(), "getRelationTypeName", params, signature);
    return ((java.lang.String) result);
  }

  //
  // Implementation of NotificationBroadcasterProxy interface
  //
  public synchronized  void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)
    throws InstanceNotFoundException {

    server.addNotificationListener(objectInstance.getObjectName(), listener, filter, handback);
  }

  public synchronized  void removeNotificationListener(ObjectName name, NotificationListener listener)
    throws InstanceNotFoundException, ListenerNotFoundException {

    server.removeNotificationListener(objectInstance.getObjectName(), listener);
  }

  //
  // Implementation of the Proxy interface
  //

  /**
   *  Returns the <a href="javax.management.ObjectInstance.html#_top_"> object instance</a> of the object
   */
  public ObjectInstance getMBeanObjectInstance()  {
    return (objectInstance);
  }

  public ProxyHandler getServer() {
    return server;
  }

  public void setServer(ProxyHandler server) {
    this.server = server;
  }


}
