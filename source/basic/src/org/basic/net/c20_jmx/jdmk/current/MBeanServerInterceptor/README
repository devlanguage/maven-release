# @(#)file      README
# @(#)author    Sun Microsystems, Inc.
# @(#)version   1.10
# @(#)lastedit  04/04/16
#
# Copyright 2004 Sun Microsystems, Inc. All rights reserved.
# SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.


                     MBeanServerInterceptor Example
                     ==============================


-----------------------------------------------------------------------
1. Overview
-----------------------------------------------------------------------

This example demonstrates how MBeanServerInterceptors can be used to:

  * Divert requests to a specific MBeanServerInterceptor (this is basically
    the purpose of the MasterMBeanServerInterceptor provided in this example).

  * Support virtual MBeans, that is, MBean classes which are faked by the
    MBeanServerInterceptor and do not require keeping any objects in any
    repository (this is what is demonstrated by the FileMBeanServerInterceptor
    provided in this example).


-----------------------------------------------------------------------
2. File List
-----------------------------------------------------------------------

This example is based on the following source files:

 * MasterMBeanServerInterceptor.java:

   This is a MasterMBeanServerInterceptor which diverts requests to "another"
   interceptor. The "other" interceptor is in fact a FileMBeanServerInterceptor
   (see below).

   The MasterMBeanServerInterceptor receives all requests from the MBeanServer
   and forwards them to either:
     - the default MBeanServerInterceptor, or
     - the "other" MBeanServerInterceptor.

   It decides to forward to one or another depending on the value of the domain
   part of the ObjectName.

   In this example we use the "file:" domain to identify the MBeans that are
   faked by the FileMBeanServerInterceptor.

 * FileMBeanServerInterceptor.java:

   This is an MBeanServerInterceptor which mirrors the content of a file-system
   directory by faking MBeans which represent files and directories.

   The FileMBeanServerInterceptor owns a reserved domain name - in this example,
   we use the "file:" domain.

   The MasterMBeanServerInterceptor uses that domain name in order to decide
   which requests are to be routed to the FileMBeanServerInterceptor.

   The FileMBeanServerInterceptor simulates two types of MBeans:
     - "VirtualDirObject": These MBeans represent directory resources.
     - "VirtualFileObject": These MBeans represent file resources.

   "VirtualDirObject" and "VirtualFileObject" have the same attributes,
   but "VirtualDirObject" has in addition a simulated "public void cd();"

   The "cd()" operation makes the FileMBeanServerInterceptor change to the
   directory represented by the "VirtualDirObject" on which that operation
   is invoked.

   The MBeans simulated by this interceptor are completely virtual.
   All the logic is contained in the interceptor itself.

 * Agent.java:

   This class implements a simple Java DMK Agent which instantiates a
   MasterMBeanServerInterceptor and plugs in a FileMBeanServerInterceptor.

   This class shows how to instantiate the MasterMBeanServerInterceptor,
   how to plug it into the MBeanServer, and how to plug the default
   MBeanServerInterceptor and the FileMBeanServerInterceptor into the
   MasterMBeanServerInterceptor.


-----------------------------------------------------------------------
3. Building and Running the Example
-----------------------------------------------------------------------

To build and run this example, make sure that your PATH environment variable
is correctly set to use the Java 2 SDK, Standard Edition 1.4 or later.

On J2SE 1.4, your CLASSPATH must contain the JAR files for the JMX runtime
(jmx.jar) and the Java DMK runtime (jdmkrt.jar), as well as the current
directory (.).

On J2SE 1.5, your CLASSPATH must contain the JAR files for the Java DMK
runtime (jdmkrt.jar), as well as the current directory (.).

These instructions assume the classpath is set in an environment variable,
though it may also be given on the command line with the -classpath option.

Copy the example source files to your working directory and type the following
commands:

    cd <WORKING_DIR>

    javac *.java

To run the example using the classes you have just built, type the
following command in a terminal window:

java -Djavax.management.builder.initial=com.sun.jdmk.JdmkMBeanServerBuilder Agent

Once you have started the Agent, follow the instructions printed by the
Agent on the terminal window.

To manage the Agent through a Web browser, load the Agent's URL in your
web browser:

    http://localhost:8082/

You will only see the MBeans registered in the default MBeanServerInterceptor
(namely the HTML Adaptor MBean and the MBeanServerDelegate MBean).

Press <Enter> in order to insert the FileMBeanServerInterceptor and view the
files from the local directory as virtual MBeans.

Now, you can reload http://localhost:8082/ in your web browser to view
the new MBeans.

Finally, press <Enter> to stop the agent.

  Note that the special character `:', when present in filenames,
  will be replaced by ';' in the ObjectNames, as `:' is not legal
  in JMX ObjectName property values. As a consequence, files and
  directories whose names contain the ';' character will not be
  accessible, as the reverse translation will not work.
  Furthermore, files and directories whose names contain any JMX
  ObjectName special character like '*', ',', '=', or '?' (except
  for ':') will not be mirrored.
