//
// Generated by proxygen version 5.1 when compiling com.sun.management.comm.SnmpAdaptorServer (Tue Apr 13 19:29:42 MEST 2004).
//

package org.basic.net.c20_jmx.jdmk.legacy.JdmkProxyMBeans;

import javax.management.Attribute;
import javax.management.AttributeNotFoundException;
import javax.management.InstanceNotFoundException;
import javax.management.InvalidAttributeValueException;
import javax.management.ListenerNotFoundException;
import javax.management.MBeanException;
import javax.management.NotificationFilter;
import javax.management.NotificationListener;
import javax.management.ObjectInstance;
import javax.management.ObjectName;
import javax.management.ReflectionException;

import com.sun.jdmk.ProxyHandler;
import com.sun.management.snmp.SnmpOid;
//import com.sun.management.snmp.IPAcl.IPAcl;

/**
 * The implementation of the SnmpAdaptorServerProxyMBean Proxy MBean interface.
 *
 * @see com.sun.jdmk.tools.ProxyGen
 */
public class SnmpAdaptorServerProxy implements SnmpAdaptorServerProxyMBean, com.sun.jdmk.Proxy,
        com.sun.jdmk.NotificationBroadcasterProxy {

    //
    // granularity for allocating new array
    //
    private int _granularity = 10;

    //
    // Variables required by Proxy interface
    //
    protected ObjectInstance objectInstance = null;
    protected ProxyHandler server = null;

    /**
     * constructor with ObjectInstance parameter
     */
    public SnmpAdaptorServerProxy(ObjectInstance oi) {
        objectInstance = oi;
    }

    /**
     * constructor with ObjectInstance parameter and ProxyHandler server
     */
    public SnmpAdaptorServerProxy(ObjectInstance oi, ProxyHandler server) {
        objectInstance = oi;
        this.server = server;
    }

    public java.lang.String getProtocol() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return ((java.lang.String) server.getAttribute(objectInstance.getObjectName(), "Protocol"));
    }

    public int getServedClientCount() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "ServedClientCount")).intValue());
    }

    public int getActiveClientCount() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "ActiveClientCount")).intValue());
    }

    public int getMaxActiveClientCount() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "MaxActiveClientCount")).intValue());
    }

    public com.sun.management.snmp.InetAddressAcl getInetAddressAcl() throws InstanceNotFoundException, AttributeNotFoundException,
            ReflectionException, MBeanException {

        return ((com.sun.management.snmp.InetAddressAcl) server.getAttribute(objectInstance.getObjectName(), "InetAddressAcl"));
    }

//    public com.sun.management.snmp.IPAcl.IPAcl getIPAcl() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
//            MBeanException {
//
//        return ((com.sun.management.snmp.IPAcl.IPAcl) server.getAttribute(objectInstance.getObjectName(), "IPAcl"));
//    }

    public java.lang.Integer getTrapPort() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Integer) server.getAttribute(objectInstance.getObjectName(), "TrapPort"));
    }

    public int getInformPort() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "InformPort")).intValue());
    }

    public java.lang.Integer getBufferSize() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Integer) server.getAttribute(objectInstance.getObjectName(), "BufferSize"));
    }

    public int getMaxTries() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "MaxTries")).intValue());
    }

    public int getTimeout() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "Timeout")).intValue());
    }

    public com.sun.management.snmp.SnmpPduFactory getPduFactory() throws InstanceNotFoundException, AttributeNotFoundException,
            ReflectionException, MBeanException {

        return ((com.sun.management.snmp.SnmpPduFactory) server.getAttribute(objectInstance.getObjectName(), "PduFactory"));
    }

    public com.sun.management.snmp.agent.SnmpUserDataFactory getUserDataFactory() throws InstanceNotFoundException, AttributeNotFoundException,
            ReflectionException, MBeanException {

        return ((com.sun.management.snmp.agent.SnmpUserDataFactory) server.getAttribute(objectInstance.getObjectName(), "UserDataFactory"));
    }

    public boolean getAuthTrapEnabled() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Boolean) server.getAttribute(objectInstance.getObjectName(), "AuthTrapEnabled")).booleanValue());
    }

    public boolean getAuthRespEnabled() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Boolean) server.getAttribute(objectInstance.getObjectName(), "AuthRespEnabled")).booleanValue());
    }

    public java.lang.String getEnterpriseOid() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.String) server.getAttribute(objectInstance.getObjectName(), "EnterpriseOid"));
    }

    public String[] getMibs() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return ((String[]) server.getAttribute(objectInstance.getObjectName(), "Mibs"));
    }

    public java.lang.Long getSnmpOutTraps() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpOutTraps"));
    }

    public java.lang.Long getSnmpOutGetResponses() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpOutGetResponses"));
    }

    public java.lang.Long getSnmpOutGenErrs() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpOutGenErrs"));
    }

    public java.lang.Long getSnmpOutBadValues() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpOutBadValues"));
    }

    public java.lang.Long getSnmpOutNoSuchNames() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpOutNoSuchNames"));
    }

    public java.lang.Long getSnmpOutTooBigs() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpOutTooBigs"));
    }

    public java.lang.Long getSnmpInASNParseErrs() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInASNParseErrs"));
    }

    public java.lang.Long getSnmpInBadCommunityUses() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInBadCommunityUses"));
    }

    public java.lang.Long getSnmpInBadCommunityNames() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInBadCommunityNames"));
    }

    public java.lang.Long getSnmpInBadVersions() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInBadVersions"));
    }

    public java.lang.Long getSnmpOutPkts() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpOutPkts"));
    }

    public java.lang.Long getSnmpInPkts() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInPkts"));
    }

    public java.lang.Long getSnmpInGetRequests() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInGetRequests"));
    }

    public java.lang.Long getSnmpInGetNexts() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInGetNexts"));
    }

    public java.lang.Long getSnmpInSetRequests() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInSetRequests"));
    }

    public java.lang.Long getSnmpInTotalSetVars() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInTotalSetVars"));
    }

    public java.lang.Long getSnmpInTotalReqVars() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpInTotalReqVars"));
    }

    public java.lang.Long getSnmpSilentDrops() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpSilentDrops"));
    }

    public java.lang.Long getSnmpProxyDrops() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.Long) server.getAttribute(objectInstance.getObjectName(), "SnmpProxyDrops"));
    }

    public int getState() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "State")).intValue());
    }

    public java.lang.String getHost() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return ((java.lang.String) server.getAttribute(objectInstance.getObjectName(), "Host"));
    }

    public int getPort() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Integer) server.getAttribute(objectInstance.getObjectName(), "Port")).intValue());
    }

    public boolean isActive() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException, MBeanException {

        return (((Boolean) server.getAttribute(objectInstance.getObjectName(), "Active")).booleanValue());
    }

    public java.lang.String getStateString() throws InstanceNotFoundException, AttributeNotFoundException, ReflectionException,
            MBeanException {

        return ((java.lang.String) server.getAttribute(objectInstance.getObjectName(), "StateString"));
    }

    public void setMaxActiveClientCount(int value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("MaxActiveClientCount", new Integer(value)));
    }

    public void setTrapPort(java.lang.Integer value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("TrapPort", value));
    }

    public void setInformPort(int value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("InformPort", new Integer(value)));
    }

    public void setBufferSize(java.lang.Integer value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("BufferSize", value));
    }

    public void setMaxTries(int value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("MaxTries", new Integer(value)));
    }

    public void setTimeout(int value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("Timeout", new Integer(value)));
    }

    public void setPduFactory(com.sun.management.snmp.SnmpPduFactory value) throws InstanceNotFoundException, ReflectionException,
            AttributeNotFoundException, InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("PduFactory", value));
    }

    public void setUserDataFactory(com.sun.management.snmp.agent.SnmpUserDataFactory value) throws InstanceNotFoundException,
            ReflectionException, AttributeNotFoundException, InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("UserDataFactory", value));
    }

    public void setAuthTrapEnabled(boolean value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("AuthTrapEnabled", new Boolean(value)));
    }

    public void setAuthRespEnabled(boolean value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("AuthRespEnabled", new Boolean(value)));
    }

    public void setEnterpriseOid(java.lang.String value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("EnterpriseOid", value));
    }

    public void setPort(int value) throws InstanceNotFoundException, ReflectionException, AttributeNotFoundException,
            InvalidAttributeValueException, MBeanException {

        server.setAttribute(objectInstance.getObjectName(), new Attribute("Port", new Integer(value)));
    }

    public com.sun.management.snmp.agent.SnmpMibHandler addMib(com.sun.management.snmp.agent.SnmpMibAgent p0) throws InstanceNotFoundException,
            ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[1];
        String[] signature = new String[1];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.agent.SnmpMibAgent";

        result = server.invoke(objectInstance.getObjectName(), "addMib", params, signature);
        return ((com.sun.management.snmp.agent.SnmpMibHandler) result);
    }

    public com.sun.management.snmp.agent.SnmpMibHandler addMib(com.sun.management.snmp.agent.SnmpMibAgent p0, SnmpOid[] p1)
            throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[2];
        String[] signature = new String[2];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.agent.SnmpMibAgent";
        params[1] = p1;
        signature[1] = "[Lcom.sun.management.snmp.SnmpOid;";

        result = server.invoke(objectInstance.getObjectName(), "addMib", params, signature);
        return ((com.sun.management.snmp.agent.SnmpMibHandler) result);
    }

    public boolean removeMib(com.sun.management.snmp.agent.SnmpMibAgent p0) throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[1];
        String[] signature = new String[1];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.agent.SnmpMibAgent";

        result = server.invoke(objectInstance.getObjectName(), "removeMib", params, signature);
        return ((Boolean) result).booleanValue();
    }

    public void snmpV1Trap(int p0, int p1, com.sun.management.snmp.SnmpVarBindList p2) throws InstanceNotFoundException,
            ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[3];
        String[] signature = new String[3];

        params[0] = new Integer(p0);
        signature[0] = "int";
        params[1] = new Integer(p1);
        signature[1] = "int";
        params[2] = p2;
        signature[2] = "com.sun.management.snmp.SnmpVarBindList";

        result = server.invoke(objectInstance.getObjectName(), "snmpV1Trap", params, signature);
    }

    public void snmpV1Trap(java.net.InetAddress p0, java.lang.String p1, int p2, int p3, com.sun.management.snmp.SnmpVarBindList p4)
            throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[5];
        String[] signature = new String[5];

        params[0] = p0;
        signature[0] = "java.net.InetAddress";
        params[1] = p1;
        signature[1] = "java.lang.String";
        params[2] = new Integer(p2);
        signature[2] = "int";
        params[3] = new Integer(p3);
        signature[3] = "int";
        params[4] = p4;
        signature[4] = "com.sun.management.snmp.SnmpVarBindList";

        result = server.invoke(objectInstance.getObjectName(), "snmpV1Trap", params, signature);
    }

    public void snmpV1Trap(com.sun.management.snmp.manager.SnmpPeer p0, com.sun.management.snmp.SnmpIpAddress p1,
                           com.sun.management.snmp.SnmpOid p2, int p3, int p4, com.sun.management.snmp.SnmpVarBindList p5,
                           com.sun.management.snmp.SnmpTimeticks p6) throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[7];
        String[] signature = new String[7];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.manager.SnmpPeer";
        params[1] = p1;
        signature[1] = "com.sun.management.snmp.SnmpIpAddress";
        params[2] = p2;
        signature[2] = "com.sun.management.snmp.SnmpOid";
        params[3] = new Integer(p3);
        signature[3] = "int";
        params[4] = new Integer(p4);
        signature[4] = "int";
        params[5] = p5;
        signature[5] = "com.sun.management.snmp.SnmpVarBindList";
        params[6] = p6;
        signature[6] = "com.sun.management.snmp.SnmpTimeticks";

        result = server.invoke(objectInstance.getObjectName(), "snmpV1Trap", params, signature);
    }

    public void snmpV2Trap(com.sun.management.snmp.SnmpOid p0, com.sun.management.snmp.SnmpVarBindList p1)
            throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[2];
        String[] signature = new String[2];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.SnmpOid";
        params[1] = p1;
        signature[1] = "com.sun.management.snmp.SnmpVarBindList";

        result = server.invoke(objectInstance.getObjectName(), "snmpV2Trap", params, signature);
    }

    public void snmpV2Trap(java.net.InetAddress p0, java.lang.String p1, com.sun.management.snmp.SnmpOid p2,
                           com.sun.management.snmp.SnmpVarBindList p3) throws InstanceNotFoundException, ReflectionException,
            MBeanException {

        Object result;
        Object[] params = new Object[4];
        String[] signature = new String[4];

        params[0] = p0;
        signature[0] = "java.net.InetAddress";
        params[1] = p1;
        signature[1] = "java.lang.String";
        params[2] = p2;
        signature[2] = "com.sun.management.snmp.SnmpOid";
        params[3] = p3;
        signature[3] = "com.sun.management.snmp.SnmpVarBindList";

        result = server.invoke(objectInstance.getObjectName(), "snmpV2Trap", params, signature);
    }

    public void snmpV2Trap(com.sun.management.snmp.manager.SnmpPeer p0, com.sun.management.snmp.SnmpOid p1,
                           com.sun.management.snmp.SnmpVarBindList p2, com.sun.management.snmp.SnmpTimeticks p3)
            throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[4];
        String[] signature = new String[4];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.manager.SnmpPeer";
        params[1] = p1;
        signature[1] = "com.sun.management.snmp.SnmpOid";
        params[2] = p2;
        signature[2] = "com.sun.management.snmp.SnmpVarBindList";
        params[3] = p3;
        signature[3] = "com.sun.management.snmp.SnmpTimeticks";

        result = server.invoke(objectInstance.getObjectName(), "snmpV2Trap", params, signature);
    }

    public void snmpPduTrap(com.sun.management.snmp.manager.SnmpPeer p0, com.sun.management.snmp.SnmpPduPacket p1)
            throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[2];
        String[] signature = new String[2];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.manager.SnmpPeer";
        params[1] = p1;
        signature[1] = "com.sun.management.snmp.SnmpPduPacket";

        result = server.invoke(objectInstance.getObjectName(), "snmpPduTrap", params, signature);
    }

    public void snmpPduTrap(java.net.InetAddress p0, com.sun.management.snmp.SnmpPduPacket p1) throws InstanceNotFoundException,
            ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[2];
        String[] signature = new String[2];

        params[0] = p0;
        signature[0] = "java.net.InetAddress";
        params[1] = p1;
        signature[1] = "com.sun.management.snmp.SnmpPduPacket";

        result = server.invoke(objectInstance.getObjectName(), "snmpPduTrap", params, signature);
    }

    public com.sun.management.comm.SnmpInformRequest snmpInformRequest(java.net.InetAddress p0, java.lang.String p1,
                                                                       com.sun.management.comm.SnmpInformHandler p2,
                                                                       com.sun.management.snmp.SnmpOid p3,
                                                                       com.sun.management.snmp.SnmpVarBindList p4)
            throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[5];
        String[] signature = new String[5];

        params[0] = p0;
        signature[0] = "java.net.InetAddress";
        params[1] = p1;
        signature[1] = "java.lang.String";
        params[2] = p2;
        signature[2] = "com.sun.management.comm.SnmpInformHandler";
        params[3] = p3;
        signature[3] = "com.sun.management.snmp.SnmpOid";
        params[4] = p4;
        signature[4] = "com.sun.management.snmp.SnmpVarBindList";

        result = server.invoke(objectInstance.getObjectName(), "snmpInformRequest", params, signature);
        return ((com.sun.management.comm.SnmpInformRequest) result);
    }

    public com.sun.management.comm.SnmpInformRequest snmpInformRequest(com.sun.management.snmp.manager.SnmpPeer p0,
                                                                       com.sun.management.comm.SnmpInformHandler p1,
                                                                       com.sun.management.snmp.SnmpOid p2,
                                                                       com.sun.management.snmp.SnmpVarBindList p3)
            throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[4];
        String[] signature = new String[4];

        params[0] = p0;
        signature[0] = "com.sun.management.snmp.manager.SnmpPeer";
        params[1] = p1;
        signature[1] = "com.sun.management.comm.SnmpInformHandler";
        params[2] = p2;
        signature[2] = "com.sun.management.snmp.SnmpOid";
        params[3] = p3;
        signature[3] = "com.sun.management.snmp.SnmpVarBindList";

        result = server.invoke(objectInstance.getObjectName(), "snmpInformRequest", params, signature);
        return ((com.sun.management.comm.SnmpInformRequest) result);
    }

    public java.util.Vector snmpInformRequest(com.sun.management.comm.SnmpInformHandler p0, com.sun.management.snmp.SnmpOid p1,
                                              com.sun.management.snmp.SnmpVarBindList p2) throws InstanceNotFoundException,
            ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[3];
        String[] signature = new String[3];

        params[0] = p0;
        signature[0] = "com.sun.management.comm.SnmpInformHandler";
        params[1] = p1;
        signature[1] = "com.sun.management.snmp.SnmpOid";
        params[2] = p2;
        signature[2] = "com.sun.management.snmp.SnmpVarBindList";

        result = server.invoke(objectInstance.getObjectName(), "snmpInformRequest", params, signature);
        return ((java.util.Vector) result);
    }

    public void start() throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        result = server.invoke(objectInstance.getObjectName(), "start", null, null);
    }

    public void stop() throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        result = server.invoke(objectInstance.getObjectName(), "stop", null, null);
    }

    public boolean waitState(int p0, long p1) throws InstanceNotFoundException, ReflectionException, MBeanException {

        Object result;
        Object[] params = new Object[2];
        String[] signature = new String[2];

        params[0] = new Integer(p0);
        signature[0] = "int";
        params[1] = new Long(p1);
        signature[1] = "long";

        result = server.invoke(objectInstance.getObjectName(), "waitState", params, signature);
        return ((Boolean) result).booleanValue();
    }

    //
    // Implementation of NotificationBroadcasterProxy interface
    //
    public synchronized void addNotificationListener(ObjectName name, NotificationListener listener, NotificationFilter filter,
                                                     Object handback) throws InstanceNotFoundException {

        server.addNotificationListener(objectInstance.getObjectName(), listener, filter, handback);
    }

    public synchronized void removeNotificationListener(ObjectName name, NotificationListener listener) throws InstanceNotFoundException,
            ListenerNotFoundException {

        server.removeNotificationListener(objectInstance.getObjectName(), listener);
    }

    //
    // Implementation of the Proxy interface
    //

    /**
     * Returns the <a href="javax.management.ObjectInstance.html#_top_"> object instance</a> of the object
     */
    public ObjectInstance getMBeanObjectInstance() {
        return (objectInstance);
    }

    public ProxyHandler getServer() {
        return server;
    }

    public void setServer(ProxyHandler server) {
        this.server = server;
    }
}
