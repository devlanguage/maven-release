2. NIO2的一些新特性
  
  1.java.nio.file 和java.nio.file.attribute包 支持更详细属性，比如权限，所有者 
  2.  symbolic and hard links支持 
  3. Path访问文件系统，Files支持各种文件操作 
  4.高效的访问metadata信息 
  5.递归查找文件树，文件扩展搜索 
  6.文件系统修改通知机制 
  7.File类操作API兼容 
  8.文件随机访问增强 mapping a region,locl a region,绝对位置读取 
  9. AIO Reactor（基于事件）和Proactor 

  下面列一些示例：

2.1IO and New IO 监听文件系统变化通知 

通过FileSystems.getDefault().newWatchService()获取watchService，然后将需要监听的path目录注册到这个watchservice中，对于这个目录的文件修改，新增，删除等实践可以配置，然后就自动能监听到响应的事件。

  private WatchService watcher; 
  public TestWatcherService(Path path) throws IOException {
  watcher = FileSystems.getDefault().newWatchService();
  path.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
  } 
  public void handleEvents() throws InterruptedException {
  while (true) {
  WatchKey key = watcher.take();
  for (WatchEvent<?> event : key.pollEvents()) {
  WatchEvent.Kind kind = event.kind();
  if (kind == OVERFLOW) {// 事件可能lost or discarded
  continue;
  }
  WatchEvent<Path> e = (WatchEvent<Path>) event;
  Path fileName = e.context();
  System.out.printf("Event %s has happened,which fileName is %s%n",kind.name(), fileName);
  }
  if (!key.reset()) {
  break;
  }

2.2 IO and New IO遍历文件树 ，通过继承SimpleFileVisitor类，实现事件遍历目录树的操作，然后通过Files.walkFileTree(listDir, opts, Integer.MAX_VALUE, walk);这个API来遍历目录树

  private void workFilePath() {
  Path listDir = Paths.get("/tmp"); // define the starting file 
  ListTree walk = new ListTree();
  …Files.walkFileTree(listDir, walk);…
  // 遍历的时候跟踪链接
  EnumSet opts = EnumSet.of(FileVisitOption.FOLLOW_LINKS);
  try {
  Files.walkFileTree(listDir, opts, Integer.MAX_VALUE, walk);
  } catch (IOException e) {
  System.err.println(e);
  }
  class ListTree extends SimpleFileVisitor<Path> {// NIO2 递归遍历文件目录的接口 
  @Override
  public FileVisitResult postVisitDirectory(Path dir, IOException exc) {
  System.out.println("Visited directory: " + dir.toString());
  return FileVisitResult.CONTINUE;
  } 
  @Override
  public FileVisitResult visitFileFailed(Path file, IOException exc) {
  System.out.println(exc);
  return FileVisitResult.CONTINUE;
  }
  }


2.3 AIO异步IO 文件和网络 异步IO在java 
 NIO2实现了，都是用AsynchronousFileChannel，AsynchronousSocketChanne等实现，关于同步阻塞IO，同步非阻塞IO，异步阻塞IO和异步非阻塞IO在ppt的这页上下面备注有说明，有兴趣的可以深入了解下。Java NIO2中就实现了操作系统的异步非阻塞IO。

  // 使用AsynchronousFileChannel.open(path, withOptions(),  
    // taskExecutor))这个API对异步文件IO的处理  
    public static void asyFileChannel2() {  
      final int THREADS = 5;  
      ExecutorService taskExecutor = Executors.newFixedThreadPool(THREADS);  
      String encoding = System.getProperty("file.encoding");  
      List<Future<ByteBuffer>> list = new ArrayList<>();  
      int sheeps = 0;  
      Path path = Paths.get("/tmp",  
          "store.txt");  
      try (AsynchronousFileChannel asynchronousFileChannel = AsynchronousFileChannel  
          .open(path, withOptions(), taskExecutor)) {  
        for (int i = 0; i < 50; i++) {  
          Callable<ByteBuffer> worker = new Callable<ByteBuffer>() {  
            @Override  
            public ByteBuffer call() throws Exception {  
              ByteBuffer buffer = ByteBuffer  
                  .allocateDirect(ThreadLocalRandom.current()  
                      .nextInt(100, 200));  
              asynchronousFileChannel.read(buffer, ThreadLocalRandom  
  ……

    