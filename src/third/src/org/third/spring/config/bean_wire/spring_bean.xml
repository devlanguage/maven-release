<?xml version="1.0" encoding="GBK" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
  xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
>
  <!-- dependency-check: Spring除了能对容器中bean的依赖设置进行检查外，还可以检查bean定义中实际属性值的设置，当然也包括采用自动装配方式设置属性值的检查 ####### dependency-check="default" 
    none ############### none 没有依赖检查，如果bean的属性没有值的话可以不用设置。 simple 对于原始类型及集合（除协作者外的一切东西）执行依赖检查 object 仅对协作者执行依赖检查 all 对协作者，原始类型及集合执行依赖检查 
    autowire：自动装配（autowire）相互协作bean之间的关联关系 ####### autowire="default" none ############### no byName 根据属性名自动装配。此选项将检查容器并根据名字查找与属性完全一致的bean，并将其与属性自动装配。例如，在bean定义中将autowire设置为by 
    name，而该bean包含master属性（同时提供setMaster(..)方法），Spring就会查找名为master的bean定义，并用它来装配给master属性。 byType 如果容器中存在一个与指定属性类型相同的bean，那么将与该属性自动装配。如果存在多个该类型的bean，那么将会抛出异常，并指出不能使用byType方式进行自动装配。若没有找到相匹配的bean，则什么事都不发生，属性也不会被设置。如果你不希望这样，那么可以通过设置dependency-check="objects"让Spring抛出异常。 
    constructor 与byType的方式类似，不同之处在于它应用于构造器参数。如果在容器中没有找到与构造器参数类型一致的bean，那么将会抛出异常。 autodetect 通过bean类的自省机制（introspection）来决定是使用constructor还是byType方式进行自动装配。如果发现默认的构造器，那么将使用byType方式。 -->
  <!-- Create the singleon Bean -->
  <bean id="studentManager" class="org.springtest.config.bean_wire.StudentManager" abstract="false" lazy-init="default"
    init-method="init" destroy-method="destory" dependency-check="default" scope="singleton" factory-method="getInstance"
  >
  </bean>

  <alias name="student" alias="stu2" />
  <alias name="student" alias="stu3" />
  <bean id="student" name="s, stu, stu1" autowire="default" class="org.springtest.config.bean_wire.Student" scope="singleton"
    factory-bean="studentManager" factory-method="createStudent"
  >
    <constructor-arg type="int" value="23" />
    <constructor-arg type="java.lang.String" value="useName" />
    <constructor-arg ref="studentManager" />
    <constructor-arg type="java.lang.String">
      <idref bean="studentManager" />
    </constructor-arg>

    <property name="address">
      <map key-type="java.lang.String">
        <entry key="city" value="TianShui" />
        <entry key="county" value="GanGu" />
      </map>
    </property>
    <property name="hobbies">
      <list>
        <value>basket-ball</value>
      </list>
    </property>
    <property name="roles">
      <set>
        <value>admin</value>
        <value>manager</value>
      </set>
    </property>
    <property name="emails">
      <props>
        <prop key="admin">admin@test.com</prop>
        <prop key="development">development@test.com</prop>
      </props>
    </property>
  </bean>

  <!-- Create the not-singleon Bean -->
  <bean id="myValueCalculator" class="org.springtest.config.MyValueCalculator">
    <!-- arbitrary method replacement -->
    <replaced-method name="computeValue" replacer="replacementComputeValue">
      <arg-type>String</arg-type>
    </replaced-method>
  </bean>
  <bean id="replacementComputeValue" class="org.springtest.config.ReplacementComputeValue" />

  <!-- a stateful bean deployed as a prototype (non-singleton) -->
  <bean id="command" class="org.springtest.config.bean_wire.Command" scope="prototype" />
  <!-- commandProcessor uses statefulCommandHelper -->
  <bean id="cmdService_BeanFactoryAware" class="org.springtest.config.bean_wire.CommandService_BeanFactoryAware"
    scope="singleton"
  >
  </bean>

  <bean id="command_lookup" class="org.springtest.config.bean_wire.Command" scope="prototype" />
  <!-- commandProcessor uses statefulCommandHelper -->
  <bean id="commandManager_lookup" class="org.springtest.config.bean_wire.CommandService_Lookup" scope="singleton">
    <lookup-method name="createCommand" bean="command_lookup" />
  </bean>

  <bean id="cmdRepService_Replacer" class="org.springtest.config.bean_wire.CmdRepService_Replacer" />
  <bean id="cmdRepService_Original" class="org.springtest.config.bean_wire.CmdRepService_Original" scope="singleton">
    <replaced-method name="businessMethod" replacer="cmdRepService_Replacer">
      <arg-type>String</arg-type>
      <arg-type>Str</arg-type>
    </replaced-method>
  </bean>

</beans>