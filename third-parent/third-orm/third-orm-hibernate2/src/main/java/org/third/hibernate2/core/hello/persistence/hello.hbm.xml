<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping package="org.third.testdata.user.domain">
    <class name="Event" table="h3_event">
        <id name="id" column="EVENT_ID">
            <generator class="assigned" />
            <!-- 
                identity: supports identity columns in DB2, MySQL, MS SQL Server, Sybase and HypersonicSQL. 
                The returned identifier is of type long, short or int. 
                
                sequence: uses a sequence in DB2, PostgreSQL, Oracle, SAP DB, McKoi or a generator in Interbase. 
                The returned identifier is of type long, short or int 
                
                hilo: uses a hi/lo algorithm to efficiently generate identifiers of type long, short or int, 
                given a table and column (by default hibernate_unique_key and next_hi respectively) as a 
                source of hi values. The hi/lo algorithm generates identifiers that are unique only for a particular database. 
                
                seqhilo: uses a hi/lo algorithm to efficiently generate identifiers of type long, short or int, given a named database sequence. 
                
                uuid: uses a 128-bit UUID algorithm to generate identifiers of type string, unique within a network 
                (the IP address is used). The UUID is encoded as a string of hexadecimal digits of length 32. 
                
                guid: uses a database-generated GUID string on MS SQL Server and MySQL. 
                
                native: picks identity, sequence or hilo depending upon the capabilities of the underlying database. 
                
                assigned: lets the application to assign an identifier to the object before save() is called. 
                This is the default strategy if no <generator> element is specified. 
                
                select: retrieves a primary key assigned by a database trigger by selecting the row by some unique key
                and retrieving the primary key value. 
                
                foreign: uses the identifier of another associated object. Usually used in conjunction with 
                a <one-to-one> primary key association. 
                
                sequence-identity: a specialized sequence generation strategy which utilizes a database sequence for 
                the actual value generation, but combines this with JDBC3 getGeneratedKeys to actually return the 
                generated identifier value as part of the insert statement execution. This strategy is only known 
                to be supported on Oracle 10g drivers targetted for JDK 1.4. Note comments on these insert statements
                are disabled due to a bug in the Oracle drivers. 
                
                
                integer, long, short, float, double, character, byte, boolean, yes_no, true_false:
                ===Java primitives or wrapper classes ===> appropriate (vendor-specific) SQL column types. 
                ===boolean, yes_no and true_false are all alternative encodings for a Java boolean or java.lang.Boolean. 
                
                string:   A type mapping from java.lang.String to VARCHAR (or Oracle VARCHAR2). 
                
                date, time, timestamp:  java.util.Date ====> its subclasses to SQL types DATE, TIME and TIMESTAMP (or equivalent). 
                
                calendar, calendar_date: java.util.Calendar ===> to SQL types TIMESTAMP and DATE (or equivalent). 
                
                big_decimal, big_integer: java.math.BigDecimal and java.math.BigInteger ===> NUMERIC (or Oracle NUMBER). 
                
                locale, timezone, currency: java.util.Locale, java.util.TimeZone and java.util.Currency ===> VARCHAR (or Oracle VARCHAR2). 
                Instances of Locale and Currency are mapped to their ISO codes. Instances of TimeZone are mapped to their ID. 
                
                class: java.lang.Class to VARCHAR (or Oracle VARCHAR2). A Class is mapped to its fully qualified name. 
                
                binary: byte arrays  ===> an appropriate SQL binary type. 
                
                text:  java.lang.String ===> a SQL CLOB or TEXT type. 
                
                serializable: serializable Java types ===> an appropriate SQL binary type. You may also indicate the Hibernate type serializable with the name of a serializable Java class or interface that does not default to a basic type. 
                
                clob, blob:  Type mappings for the JDBC classes java.sql.Clob and java.sql.Blob. These types may be inconvenient for some applications, since the blob or clob object may not be reused outside of a transaction. (Furthermore, driver support is patchy and inconsistent.) 
                
                imm_date, imm_time, imm_timestamp, imm_calendar, imm_calendar_date, imm_serializable, imm_binary:
                =====> Type mappings for what are usually considered mutable Java types, where Hibernate makes certain optimizations appropriate only for immutable Java types, and the application treats the object as immutable. For example, you should not call Date.setTime() for an instance mapped as imm_timestamp. To change the value of the property, and have that change made persistent, the application must assign a new (nonidentical) object to the property. 
                
                
                
            -->
        </id>
        <!-- 
            Why does the date property mapping include the column attribute,
            but the title doesn't? Without the column attribute Hibernate by 
            default uses the property name as the column name. This works fine
            for title. However, date is a reserved keyword in most database, 
            so we better map it to a different name.  
            
            access="field|property|ClassName
        -->
        <property name="date" type="timestamp" column="EVENT_DATE" />
        <property name="title" />

        <!--所有的集合映射，除了set和bag语义的以外，都需要指定一个集合表的索引字段(index column)——用于对应到数组索引，或者List的索引，或者Map的关键字。
            通过<map-key>,Map 的索引可以是任何基础类型；若通过<map-key-many-to-many>，它也可以是一个实体引用；若通过<composite-map-key>，
            它还可以是一个组合类型。数组或列表的索引必须是integer类型，并且使用 <list-index>元素定义映射。被映射的字段包含有顺序排列的整数（默认从0开始）。 
            
            <array name="addresses" 
            table="PersonAddress" 
            cascade="persist">
            <key column="personId"/>
            <list-index column="sortOrder"/>
            <many-to-many column="addressId" class="Address"/>
            </array>
            <map name="holidays" 
            table="holidays" 
            schema="dbo" 
            order-by="hol_name asc">
            <key column="id"/>
            <map-key column="hol_name" type="string"/>
            <element column="hol_date" type="date"/>
            </map>
            <list name="carComponents" 
            table="CarComponents">
            <key column="carId"/>
            <list-index column="sortOrder"/>
            <composite-element class="CarComponent">
            <property name="price"/>
            <property name="type"/>
            <property name="serialNumber" column="serialNum"/>
            </composite-element>
            </list>
            
            Cascade: default none
            all|none|save-update|delete|all-delete-orphan|delet(6)e-orphan
            optimistic-lock (optional - defaults to true):
            ===>  对集合的状态的改变会是否导致其所属的实体的版本增长。 (对一对多关联来说，关闭这个属性常常是有理的) 
            mutable (optional - defaults to true): 
            ===>  A value of false specifies that the elements of the collection never change (a minor performance optimization in some cases). 
            fetch:用于在外连接抓取、通过后续select抓取和通过后续subselect抓取之间选择。 
            sort: unsorted, natural: note: if sore is not equal to unsorted, class Person should implements the java.lang.Comparable
            
        -->
        <set name="persons" table="h3_person_event" inverse="false" sort="unsorted">
            <key column="EVENT_ID" />
            <many-to-many column="PERSON_ID" class="Person" />
        </set>
        <joined-subclass name="ErrorEvent" table="H3_ERROR_EVENT">
            <key column="event_id"></key>
            <property name="errorName" column="error_name"></property>
        </joined-subclass>

    </class>


    <class name="Person" table="h3_person" discriminator-value="PERSON"
        check="profession in ('PERSON','WORKER','PEASANT')">
        <id name="id" column="PERSON_ID" access="field">
            <generator class="assigned" />
        </id>
        <discriminator column="profession"></discriminator>
        <property name="age" access="field" />
        <component name="userName" class="UserName">
            <property name="firstName" column="first_name" access="field" />
            <property name="lastName" column="last_name" access="field" />
        </component>

        <!-- 
            Bag是集合，与Set不同的是，Bag允许重复的元素, 可以看成是无序的List
            在Java的标准API中并没有提供Bag容器，Hibernate提供自己的Bag实现，允许您将List映射为Bag(Version3: ArrayList)。
            由于Bag的资料允许重复，当必须更新资料时，无法确定要更新的是哪一笔资料，因而采取的方式是删除集合物件对应的所有资料，然后重新将集
            合物件中的资料写入资料库，显然的这种作法相当的没有效率(一条Delete语句 + 多条Insert语句)。 作为Bag的一种扩充，Hibernate提供
            idbag，藉由在定义Bag映射时加上"collection-id"，让Hibernate可以直接确定所要更新的资料，提高资料库操作的效率. 这是Hibernate
            将根据Collection-ID 直接Delete掉相关的记录
        -->
        <idbag name="roles" table="h3_person_role" cascade="save-update">
            <collection-id type="java.lang.String" column="collection_id">
                <generator class="uuid.hex"></generator>
            </collection-id>
            <key column="PERSON_ID" />
            <element type="string" column="ROLE_NAME" />
        </idbag>
        <bag name="emblements" table="h3_person_emblement">
            <key column="person_id" />
            <one-to-many class="Emblement" />
        </bag>

        <list name="magazines" inverse="true" cascade="all">
            <!--
                select m.*, p.*, a.*
                from h3_person p, h3_address a, h3_magazine m
                where p.person_id = a.person_id
            -->
            <key column="person_id"></key>
            <list-index base="100" column="magazine_id"></list-index>
            <one-to-many class="Magazine" />
        </list>

        <set name="emailAddresses" table="h3_person_email" inverse="true" lazy="true"
            sort="natural">
            <!-- select ea.* from h3_person_email ea where ea.PERSON_ID in (?, ?) -->
            <key column="PERSON_ID" />
            <element type="string" column="EMAIL_address" />
        </set>
        <set name="events" table="h3_person_event" inverse="true" batch-size="3" cascade="all"
            sort="natural">
            <key column="PERSON_ID" />
            <many-to-many column="EVENT_ID" class="Event" />
        </set>

        <join table="h3_person_address">
            <!-- map properties of one class to several tables. 
                select p.*, a.* from h3_person p, h3_address a where p.person_id = a.person_id
            -->
            <key column="person_id"></key>
            <property name="country" />
            <property name="city" />
            <property name="town" />
        </join>

        <subclass name="Worker" discriminator-value="WORKER">
            <property name="position" />
        </subclass>
        <subclass name="Peasant" discriminator-value="PEASANT">
            <!-- wheat, rice, broomcorn, oat, barley, soybean sprout -->
            <property name="emblement"></property>
        </subclass>
    </class>

    <class name="Emblement" table="h3_emblement">
        <id name="emblementId" column="emblement_id" access="property">
            <generator class="assigned" />
        </id>
        <property name="emblementName" column="emblement_name" />
        <property name="output" column="output" type="big_decimal" precision="2" scale="10" />
        <property name="unit" />
    </class>
    <class name="Magazine" table="h3_magazine">
        <id name="id" column="magazine_id" access="property">
            <generator class="assigned" />
        </id>
        <property name="isbn"></property>
        <property name="title"></property>
        <property name="version"></property>
        <property name="price" column="PRICE" type="float"></property>
        <!-- 
            outer-join关键字 (many-to-one的情况)
            outer-join 关键字有3个值，分别是true,false,auto,默认是 auto。
            1） true: 表示使用外连接抓取关联的内容，这里的意思是
            当使用load(Magazine.class)
            如果true: select * from Magazine m left join Person p on m.person_id = p.person_id. 将禁用lazy加载
            如果false: select * from Magazine m where m.magazine_id=?, select * from Person p where p.person_id =?。 方便Lazy加载
            2）auto: 其含义是false, 或者 true, 取决于：hibernate.cfg.xml的propery: max_fetch_depth
            
            不过最好使用fetch属性来表示，及fetch="join"或者fetch="select"。
        -->
        <many-to-one name="person" column="person_id" outer-join="true" />
    </class>
    <query name="getAllErrorEvents">
        <![CDATA[from ErrorEvent e]]>
    </query>
    <query name="getAllWorkers">
        <![CDATA[select w from org.third.testdata.user.domain.Worker w]]>
    </query>
    <query name="getAllChinesePerson">
        <![CDATA[select p from Person p where p.country='China']]>
    </query>
    <sql-query name="getAllWorkersBySQL">
        <![CDATA[
            select * from h3_person p where p.profession='WORKER'
        ]]>
    </sql-query>
</hibernate-mapping>

